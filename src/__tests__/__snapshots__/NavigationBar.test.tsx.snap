// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NavigationBar shows the correct content when the user is a non-administrator 1`] = `
.c0.c0 {
  padding: 10px;
}

.c0.c0 :hover,
.c0:focus {
  background-color: none;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-position: 0 -15px;
  -webkit-transition: background-position .1s linear;
  -moz-transition: background-position .1s linear;
  -o-transition: background-position .1s linear;
  -webkit-transition: background-position .1s linear;
  transition: background-position .1s linear;
}

.c2.c2 {
  margin-left: 10px;
}

.c1.c1 {
  color: hsl(217,71%,53%);
  padding: 0;
  border: none;
  background: none;
}

<nav
  className="navbar is-full-width  "
>
  <div
    className="navbar-brand"
  >
    <a
      aria-expanded="false"
      aria-label="menu"
      className="navbar-burger burger "
      onClick={[Function]}
      role="button"
    >
      <span
        aria-hidden="true"
      />
      <span
        aria-hidden="true"
      />
      <span
        aria-hidden="true"
      />
    </a>
  </div>
  <div
    className="navbar-menu has-text-weight-light  "
  >
    <div
      className="navbar-start "
    >
      <NavLink
        activeClassName="has-text-weight-bold has-text-link"
        className="navbar-item item"
        exact={true}
        to="/"
      >
        <Route
          exact={true}
          path="\\\\/"
        >
          <Link
            aria-current="page"
            className="navbar-item item has-text-weight-bold has-text-link"
            style={Object {}}
            to="/"
          >
            <a
              aria-current="page"
              className="navbar-item item has-text-weight-bold has-text-link"
              href="/"
              onClick={[Function]}
              style={Object {}}
            >
              Search
            </a>
          </Link>
        </Route>
      </NavLink>
      <NavLink
        activeClassName="has-text-weight-bold has-text-link"
        className="navbar-item item"
        to="/data-requests"
      >
        <Route
          path="\\\\/data-requests"
        >
          <Link
            aria-current={null}
            className="navbar-item item"
            to="/data-requests"
          >
            <a
              aria-current={null}
              className="navbar-item item"
              href="/data-requests"
              onClick={[Function]}
            >
              Data Requests
            </a>
          </Link>
        </Route>
      </NavLink>
    </div>
    <div
      className="navbar-end subtitle is-4"
    >
      <div
        className="navbar-item has-dropdown is-hoverable"
      >
        <a
          className="navbar-link"
        >
          Hello 
          name
        </a>
        <div
          className="navbar-dropdown"
        >
          <NavLink
            activeClassName="has-text-weight-bold has-text-link"
            className="navbar-item"
            to="/account"
          >
            <Route
              path="\\\\/account"
            >
              <Link
                aria-current={null}
                className="navbar-item"
                to="/account"
              >
                <a
                  aria-current={null}
                  className="navbar-item"
                  href="/account"
                  onClick={[Function]}
                >
                  Account
                </a>
              </Link>
            </Route>
          </NavLink>
          <NavLink
            activeClassName="has-text-weight-bold has-text-link"
            className="navbar-item"
            to="/user-update"
          >
            <Route
              path="\\\\/user-update"
            >
              <Link
                aria-current={null}
                className="navbar-item"
                to="/user-update"
              >
                <a
                  aria-current={null}
                  className="navbar-item"
                  href="/user-update"
                  onClick={[Function]}
                >
                  Account Edit
                </a>
              </Link>
            </Route>
          </NavLink>
          <NavLink
            className="navbar-item"
            data-test="logout"
            onClick={[Function]}
            to="/"
          >
            <Route
              path="\\\\/"
            >
              <Link
                aria-current="page"
                className="navbar-item active"
                data-test="logout"
                onClick={[Function]}
                style={Object {}}
                to="/"
              >
                <a
                  aria-current="page"
                  className="navbar-item active"
                  data-test="logout"
                  href="/"
                  onClick={[Function]}
                  style={Object {}}
                >
                  Logout
                </a>
              </Link>
            </Route>
          </NavLink>
        </div>
      </div>
      <Query
        query={
          Object {
            "definitions": Array [
              Object {
                "directives": Array [],
                "kind": "OperationDefinition",
                "name": Object {
                  "kind": "Name",
                  "value": "CART_QUERY",
                },
                "operation": "query",
                "selectionSet": Object {
                  "kind": "SelectionSet",
                  "selections": Array [
                    Object {
                      "alias": undefined,
                      "arguments": Array [],
                      "directives": Array [
                        Object {
                          "arguments": Array [],
                          "kind": "Directive",
                          "name": Object {
                            "kind": "Name",
                            "value": "client",
                          },
                        },
                      ],
                      "kind": "Field",
                      "name": Object {
                        "kind": "Name",
                        "value": "cart",
                      },
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "id",
                            },
                            "selectionSet": undefined,
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "name",
                            },
                            "selectionSet": undefined,
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "observation",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "id",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "name",
                                  },
                                  "selectionSet": undefined,
                                },
                              ],
                            },
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "target",
                            },
                            "selectionSet": undefined,
                          },
                        ],
                      },
                    },
                  ],
                },
                "variableDefinitions": Array [],
              },
            ],
            "kind": "Document",
            "loc": Object {
              "end": 136,
              "start": 0,
            },
          }
        }
      >
        <CartButton
          cartItemsNumber={0}
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [
                    Object {
                      "className": "navbar-item is-large is-link",
                    },
                  ],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "
  && {
    padding: 10px;
  }
  && :hover, :focus {
    
    background-color: none;
    text-decoration: none;
    background-position: 0 -15px;
    -webkit-transition: background-position .1s linear;
    -moz-transition: background-position .1s linear;
    -o-transition: background-position .1s linear;
    transition: background-position .1s linear;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="navbar-item is-large is-link c0"
              >
                <styled.span
                  onClick={[Function]}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [
                          Object {
                            "className": "button title is-outlined",
                          },
                        ],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "
  && {
  color: hsl(217, 71%, 53%);
    padding: 0;
border: none;
background: none;
  }
  
}
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                  >
                    <span
                      className="button title is-outlined c1"
                      onClick={[Function]}
                    >
                      <span
                        className="has-badge-rounded has-badge-danger is-span"
                        data-badge="0"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={false}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                576,
                                512,
                                Array [],
                                "f07a",
                                "M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z",
                              ],
                              "iconName": "shopping-cart",
                              "prefix": "fas",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-shopping-cart fa-w-18 "
                            data-icon="shopping-cart"
                            data-prefix="fas"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 576 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z"
                              fill="currentColor"
                              style={Object {}}
                            />
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                      <styled.span>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {
                                  "className": "is-span",
                                },
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bwzfXH",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "
  && {
    margin-left: 10px;
  }
",
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bwzfXH",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="is-span c2"
                          />
                        </StyledComponent>
                      </styled.span>
                    </span>
                  </StyledComponent>
                </styled.span>
              </div>
            </StyledComponent>
          </styled.div>
        </CartButton>
      </Query>
    </div>
  </div>
</nav>
`;

exports[`NavigationBar shows the correct content when the user is an administrator 1`] = `
.c0.c0 {
  padding: 10px;
}

.c0.c0 :hover,
.c0:focus {
  background-color: none;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-position: 0 -15px;
  -webkit-transition: background-position .1s linear;
  -moz-transition: background-position .1s linear;
  -o-transition: background-position .1s linear;
  -webkit-transition: background-position .1s linear;
  transition: background-position .1s linear;
}

.c2.c2 {
  margin-left: 10px;
}

.c1.c1 {
  color: hsl(217,71%,53%);
  padding: 0;
  border: none;
  background: none;
}

<nav
  className="navbar is-full-width  "
>
  <div
    className="navbar-brand"
  >
    <a
      aria-expanded="false"
      aria-label="menu"
      className="navbar-burger burger "
      onClick={[Function]}
      role="button"
    >
      <span
        aria-hidden="true"
      />
      <span
        aria-hidden="true"
      />
      <span
        aria-hidden="true"
      />
    </a>
  </div>
  <div
    className="navbar-menu has-text-weight-light  "
  >
    <div
      className="navbar-start "
    >
      <NavLink
        activeClassName="has-text-weight-bold has-text-link"
        className="navbar-item item"
        exact={true}
        to="/"
      >
        <Route
          exact={true}
          path="\\\\/"
        >
          <Link
            aria-current="page"
            className="navbar-item item has-text-weight-bold has-text-link"
            style={Object {}}
            to="/"
          >
            <a
              aria-current="page"
              className="navbar-item item has-text-weight-bold has-text-link"
              href="/"
              onClick={[Function]}
              style={Object {}}
            >
              Search
            </a>
          </Link>
        </Route>
      </NavLink>
      <NavLink
        activeClassName="has-text-weight-bold has-text-link"
        className="navbar-item item"
        to="/data-requests"
      >
        <Route
          path="\\\\/data-requests"
        >
          <Link
            aria-current={null}
            className="navbar-item item"
            to="/data-requests"
          >
            <a
              aria-current={null}
              className="navbar-item item"
              href="/data-requests"
              onClick={[Function]}
            >
              Data Requests
            </a>
          </Link>
        </Route>
      </NavLink>
      <NavLink
        activeClassName="has-text-weight-bold has-text-link"
        className="navbar-item"
        to="/admin"
      >
        <Route
          path="\\\\/admin"
        >
          <Link
            aria-current={null}
            className="navbar-item"
            to="/admin"
          >
            <a
              aria-current={null}
              className="navbar-item"
              href="/admin"
              onClick={[Function]}
            >
              Admin
            </a>
          </Link>
        </Route>
      </NavLink>
    </div>
    <div
      className="navbar-end subtitle is-4"
    >
      <div
        className="navbar-item has-dropdown is-hoverable"
      >
        <a
          className="navbar-link"
        >
          Hello 
          name
        </a>
        <div
          className="navbar-dropdown"
        >
          <NavLink
            activeClassName="has-text-weight-bold has-text-link"
            className="navbar-item"
            to="/account"
          >
            <Route
              path="\\\\/account"
            >
              <Link
                aria-current={null}
                className="navbar-item"
                to="/account"
              >
                <a
                  aria-current={null}
                  className="navbar-item"
                  href="/account"
                  onClick={[Function]}
                >
                  Account
                </a>
              </Link>
            </Route>
          </NavLink>
          <NavLink
            activeClassName="has-text-weight-bold has-text-link"
            className="navbar-item"
            to="/user-update"
          >
            <Route
              path="\\\\/user-update"
            >
              <Link
                aria-current={null}
                className="navbar-item"
                to="/user-update"
              >
                <a
                  aria-current={null}
                  className="navbar-item"
                  href="/user-update"
                  onClick={[Function]}
                >
                  Account Edit
                </a>
              </Link>
            </Route>
          </NavLink>
          <NavLink
            className="navbar-item"
            data-test="logout"
            onClick={[Function]}
            to="/"
          >
            <Route
              path="\\\\/"
            >
              <Link
                aria-current="page"
                className="navbar-item active"
                data-test="logout"
                onClick={[Function]}
                style={Object {}}
                to="/"
              >
                <a
                  aria-current="page"
                  className="navbar-item active"
                  data-test="logout"
                  href="/"
                  onClick={[Function]}
                  style={Object {}}
                >
                  Logout
                </a>
              </Link>
            </Route>
          </NavLink>
        </div>
      </div>
      <Query
        query={
          Object {
            "definitions": Array [
              Object {
                "directives": Array [],
                "kind": "OperationDefinition",
                "name": Object {
                  "kind": "Name",
                  "value": "CART_QUERY",
                },
                "operation": "query",
                "selectionSet": Object {
                  "kind": "SelectionSet",
                  "selections": Array [
                    Object {
                      "alias": undefined,
                      "arguments": Array [],
                      "directives": Array [
                        Object {
                          "arguments": Array [],
                          "kind": "Directive",
                          "name": Object {
                            "kind": "Name",
                            "value": "client",
                          },
                        },
                      ],
                      "kind": "Field",
                      "name": Object {
                        "kind": "Name",
                        "value": "cart",
                      },
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "id",
                            },
                            "selectionSet": undefined,
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "name",
                            },
                            "selectionSet": undefined,
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "observation",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "id",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "name",
                                  },
                                  "selectionSet": undefined,
                                },
                              ],
                            },
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "target",
                            },
                            "selectionSet": undefined,
                          },
                        ],
                      },
                    },
                  ],
                },
                "variableDefinitions": Array [],
              },
            ],
            "kind": "Document",
            "loc": Object {
              "end": 136,
              "start": 0,
            },
          }
        }
      >
        <CartButton
          cartItemsNumber={0}
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [
                    Object {
                      "className": "navbar-item is-large is-link",
                    },
                  ],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "
  && {
    padding: 10px;
  }
  && :hover, :focus {
    
    background-color: none;
    text-decoration: none;
    background-position: 0 -15px;
    -webkit-transition: background-position .1s linear;
    -moz-transition: background-position .1s linear;
    -o-transition: background-position .1s linear;
    transition: background-position .1s linear;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="navbar-item is-large is-link c0"
              >
                <styled.span
                  onClick={[Function]}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [
                          Object {
                            "className": "button title is-outlined",
                          },
                        ],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "
  && {
  color: hsl(217, 71%, 53%);
    padding: 0;
border: none;
background: none;
  }
  
}
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                  >
                    <span
                      className="button title is-outlined c1"
                      onClick={[Function]}
                    >
                      <span
                        className="has-badge-rounded has-badge-danger is-span"
                        data-badge="0"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={false}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                576,
                                512,
                                Array [],
                                "f07a",
                                "M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z",
                              ],
                              "iconName": "shopping-cart",
                              "prefix": "fas",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-shopping-cart fa-w-18 "
                            data-icon="shopping-cart"
                            data-prefix="fas"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 576 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z"
                              fill="currentColor"
                              style={Object {}}
                            />
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                      <styled.span>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {
                                  "className": "is-span",
                                },
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bwzfXH",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "
  && {
    margin-left: 10px;
  }
",
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bwzfXH",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="is-span c2"
                          />
                        </StyledComponent>
                      </styled.span>
                    </span>
                  </StyledComponent>
                </styled.span>
              </div>
            </StyledComponent>
          </styled.div>
        </CartButton>
      </Query>
    </div>
  </div>
</nav>
`;

exports[`NavigationBar shows the correct content when the user is not logged in 1`] = `
.c0.c0 {
  padding: 10px;
}

.c0.c0 :hover,
.c0:focus {
  background-color: none;
  -webkit-text-decoration: none;
  text-decoration: none;
  background-position: 0 -15px;
  -webkit-transition: background-position .1s linear;
  -moz-transition: background-position .1s linear;
  -o-transition: background-position .1s linear;
  -webkit-transition: background-position .1s linear;
  transition: background-position .1s linear;
}

.c2.c2 {
  margin-left: 10px;
}

.c1.c1 {
  color: hsl(217,71%,53%);
  padding: 0;
  border: none;
  background: none;
}

<nav
  className="navbar is-full-width  "
>
  <div
    className="navbar-brand"
  >
    <a
      aria-expanded="false"
      aria-label="menu"
      className="navbar-burger burger "
      onClick={[Function]}
      role="button"
    >
      <span
        aria-hidden="true"
      />
      <span
        aria-hidden="true"
      />
      <span
        aria-hidden="true"
      />
    </a>
  </div>
  <div
    className="navbar-menu has-text-weight-light  "
  >
    <div
      className="navbar-start "
    >
      <NavLink
        activeClassName="has-text-weight-bold has-text-link"
        className="navbar-item item"
        exact={true}
        to="/"
      >
        <Route
          exact={true}
          path="\\\\/"
        >
          <Link
            aria-current="page"
            className="navbar-item item has-text-weight-bold has-text-link"
            style={Object {}}
            to="/"
          >
            <a
              aria-current="page"
              className="navbar-item item has-text-weight-bold has-text-link"
              href="/"
              onClick={[Function]}
              style={Object {}}
            >
              Search
            </a>
          </Link>
        </Route>
      </NavLink>
    </div>
    <div
      className="navbar-end subtitle is-4"
    >
      <div
        className="navbar-item"
      >
        <NavLink
          className=" button is-primary is-outlined"
          to="/login"
        >
          <Route
            path="\\\\/login"
          >
            <Link
              aria-current={null}
              className=" button is-primary is-outlined"
              to="/login"
            >
              <a
                aria-current={null}
                className=" button is-primary is-outlined"
                href="/login"
                onClick={[Function]}
              >
                <span>
                  Login 
                  <FontAwesomeIcon
                    border={false}
                    className=""
                    fixedWidth={false}
                    flip={null}
                    icon={
                      Object {
                        "icon": Array [
                          512,
                          512,
                          Array [],
                          "f2f6",
                          "M416 448h-84c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h84c17.7 0 32-14.3 32-32V160c0-17.7-14.3-32-32-32h-84c-6.6 0-12-5.4-12-12V76c0-6.6 5.4-12 12-12h84c53 0 96 43 96 96v192c0 53-43 96-96 96zm-47-201L201 79c-15-15-41-4.5-41 17v96H24c-13.3 0-24 10.7-24 24v96c0 13.3 10.7 24 24 24h136v96c0 21.5 26 32 41 17l168-168c9.3-9.4 9.3-24.6 0-34z",
                        ],
                        "iconName": "sign-in-alt",
                        "prefix": "fas",
                      }
                    }
                    inverse={false}
                    listItem={false}
                    mask={null}
                    pull={null}
                    pulse={false}
                    rotation={null}
                    size={null}
                    spin={false}
                    symbol={false}
                    title=""
                    transform={null}
                  >
                    <svg
                      aria-hidden="true"
                      className="svg-inline--fa fa-sign-in-alt fa-w-16 "
                      data-icon="sign-in-alt"
                      data-prefix="fas"
                      focusable="false"
                      role="img"
                      style={Object {}}
                      viewBox="0 0 512 512"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M416 448h-84c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h84c17.7 0 32-14.3 32-32V160c0-17.7-14.3-32-32-32h-84c-6.6 0-12-5.4-12-12V76c0-6.6 5.4-12 12-12h84c53 0 96 43 96 96v192c0 53-43 96-96 96zm-47-201L201 79c-15-15-41-4.5-41 17v96H24c-13.3 0-24 10.7-24 24v96c0 13.3 10.7 24 24 24h136v96c0 21.5 26 32 41 17l168-168c9.3-9.4 9.3-24.6 0-34z"
                        fill="currentColor"
                        style={Object {}}
                      />
                    </svg>
                  </FontAwesomeIcon>
                </span>
              </a>
            </Link>
          </Route>
        </NavLink>
      </div>
      <div
        className="navbar-item"
      >
        <NavLink
          className=" button is-info is-outlined"
          to="/register"
        >
          <Route
            path="\\\\/register"
          >
            <Link
              aria-current={null}
              className=" button is-info is-outlined"
              to="/register"
            >
              <a
                aria-current={null}
                className=" button is-info is-outlined"
                href="/register"
                onClick={[Function]}
              >
                <span>
                  Register 
                  <FontAwesomeIcon
                    border={false}
                    className=""
                    fixedWidth={false}
                    flip={null}
                    icon={
                      Object {
                        "icon": Array [
                          640,
                          512,
                          Array [],
                          "f234",
                          "M624 208h-64v-64c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v64h-64c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h64v64c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-64h64c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm-400 48c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4z",
                        ],
                        "iconName": "user-plus",
                        "prefix": "fas",
                      }
                    }
                    inverse={false}
                    listItem={false}
                    mask={null}
                    pull={null}
                    pulse={false}
                    rotation={null}
                    size={null}
                    spin={false}
                    symbol={false}
                    title=""
                    transform={null}
                  >
                    <svg
                      aria-hidden="true"
                      className="svg-inline--fa fa-user-plus fa-w-20 "
                      data-icon="user-plus"
                      data-prefix="fas"
                      focusable="false"
                      role="img"
                      style={Object {}}
                      viewBox="0 0 640 512"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M624 208h-64v-64c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v64h-64c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h64v64c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-64h64c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm-400 48c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4z"
                        fill="currentColor"
                        style={Object {}}
                      />
                    </svg>
                  </FontAwesomeIcon>
                </span>
              </a>
            </Link>
          </Route>
        </NavLink>
      </div>
      <Query
        query={
          Object {
            "definitions": Array [
              Object {
                "directives": Array [],
                "kind": "OperationDefinition",
                "name": Object {
                  "kind": "Name",
                  "value": "CART_QUERY",
                },
                "operation": "query",
                "selectionSet": Object {
                  "kind": "SelectionSet",
                  "selections": Array [
                    Object {
                      "alias": undefined,
                      "arguments": Array [],
                      "directives": Array [
                        Object {
                          "arguments": Array [],
                          "kind": "Directive",
                          "name": Object {
                            "kind": "Name",
                            "value": "client",
                          },
                        },
                      ],
                      "kind": "Field",
                      "name": Object {
                        "kind": "Name",
                        "value": "cart",
                      },
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "id",
                            },
                            "selectionSet": undefined,
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "name",
                            },
                            "selectionSet": undefined,
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "observation",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "id",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "name",
                                  },
                                  "selectionSet": undefined,
                                },
                              ],
                            },
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "target",
                            },
                            "selectionSet": undefined,
                          },
                        ],
                      },
                    },
                  ],
                },
                "variableDefinitions": Array [],
              },
            ],
            "kind": "Document",
            "loc": Object {
              "end": 136,
              "start": 0,
            },
          }
        }
      >
        <CartButton
          cartItemsNumber={0}
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [
                    Object {
                      "className": "navbar-item is-large is-link",
                    },
                  ],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "
  && {
    padding: 10px;
  }
  && :hover, :focus {
    
    background-color: none;
    text-decoration: none;
    background-position: 0 -15px;
    -webkit-transition: background-position .1s linear;
    -moz-transition: background-position .1s linear;
    -o-transition: background-position .1s linear;
    transition: background-position .1s linear;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="navbar-item is-large is-link c0"
              >
                <styled.span
                  onClick={[Function]}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [
                          Object {
                            "className": "button title is-outlined",
                          },
                        ],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "
  && {
  color: hsl(217, 71%, 53%);
    padding: 0;
border: none;
background: none;
  }
  
}
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                  >
                    <span
                      className="button title is-outlined c1"
                      onClick={[Function]}
                    >
                      <span
                        className="has-badge-rounded has-badge-danger is-span"
                        data-badge="0"
                      >
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={false}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                576,
                                512,
                                Array [],
                                "f07a",
                                "M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z",
                              ],
                              "iconName": "shopping-cart",
                              "prefix": "fas",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-shopping-cart fa-w-18 "
                            data-icon="shopping-cart"
                            data-prefix="fas"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 576 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z"
                              fill="currentColor"
                              style={Object {}}
                            />
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                      <styled.span>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {
                                  "className": "is-span",
                                },
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bwzfXH",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "
  && {
    margin-left: 10px;
  }
",
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bwzfXH",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <span
                            className="is-span c2"
                          />
                        </StyledComponent>
                      </styled.span>
                    </span>
                  </StyledComponent>
                </styled.span>
              </div>
            </StyledComponent>
          </styled.div>
        </CartButton>
      </Query>
    </div>
  </div>
</nav>
`;

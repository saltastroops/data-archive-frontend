// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Bvit  should render correctly with a mode and a filter 1`] = `
.c0.c0 {
  display: grid;
  grid-template-columns: 50% 50%;
  padding: 10px;
}

.c1.c1 {
  text-align: left;
  padding-left: 10px;
}

<BVIT
  bvit={
    Object {
      "errors": Object {},
      "filter": "H-alpha",
      "mode": "Imaging",
      "name": "BVIT",
    }
  }
  onChange={[MockFunction]}
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [
            Object {
              "className": "main-grid",
            },
          ],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bZQynM",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  && {
    display: grid;
    grid-template-columns: 50% 50%;
    padding: 10px;
  }
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bZQynM",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="main-grid c0"
      >
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  Object {
                    "className": "sub-grid",
                  },
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dnqmqq",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  && {
    text-align: left;
    padding-left: 10px;
  }
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dnqmqq",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sub-grid c1"
            >
              <p>
                Mode
              </p>
              <SelectField
                name="mode"
                onChange={[Function]}
                value="Imaging"
              >
                <div
                  className="control select "
                >
                  <select
                    name="mode"
                    onChange={[Function]}
                    value="Imaging"
                  >
                    <AnyOption>
                      <option
                        key="any"
                        value=""
                      >
                        Any
                      </option>
                    </AnyOption>
                    <option
                      key="Imaging"
                      value="Imaging"
                    >
                      Imaging
                    </option>
                    <option
                      key="Streaming"
                      value="Streaming"
                    >
                      Streaming
                    </option>
                  </select>
                </div>
              </SelectField>
            </div>
          </StyledComponent>
        </styled.div>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  Object {
                    "className": "sub-grid",
                  },
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dnqmqq",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  && {
    text-align: left;
    padding-left: 10px;
  }
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dnqmqq",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sub-grid c1"
            >
              <p>
                Filter
              </p>
              <SelectField
                name="filter"
                onChange={[Function]}
                value="H-alpha"
              >
                <div
                  className="control select "
                >
                  <select
                    name="filter"
                    onChange={[Function]}
                    value="H-alpha"
                  >
                    <AnyOption>
                      <option
                        key="any"
                        value=""
                      >
                        Any
                      </option>
                    </AnyOption>
                    <option
                      key="B"
                      value="B"
                    >
                      B
                    </option>
                    <option
                      key="H-alpha"
                      value="H-alpha"
                    >
                      H-alpha
                    </option>
                    <option
                      key="Open"
                      value="Open"
                    >
                      Open
                    </option>
                    <option
                      key="R"
                      value="R"
                    >
                      R
                    </option>
                    <option
                      key="U"
                      value="U"
                    >
                      U
                    </option>
                    <option
                      key="V"
                      value="V"
                    >
                      V
                    </option>
                  </select>
                </div>
              </SelectField>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</BVIT>
`;

exports[`Bvit  should render correctly without a mode and a filter 1`] = `
.c0.c0 {
  display: grid;
  grid-template-columns: 50% 50%;
  padding: 10px;
}

.c1.c1 {
  text-align: left;
  padding-left: 10px;
}

<BVIT
  bvit={
    Object {
      "errors": Object {},
      "name": "BVIT",
    }
  }
  onChange={[MockFunction]}
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [
            Object {
              "className": "main-grid",
            },
          ],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bZQynM",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  && {
    display: grid;
    grid-template-columns: 50% 50%;
    padding: 10px;
  }
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bZQynM",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="main-grid c0"
      >
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  Object {
                    "className": "sub-grid",
                  },
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dnqmqq",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  && {
    text-align: left;
    padding-left: 10px;
  }
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dnqmqq",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sub-grid c1"
            >
              <p>
                Mode
              </p>
              <SelectField
                name="mode"
                onChange={[Function]}
              >
                <div
                  className="control select "
                >
                  <select
                    name="mode"
                    onChange={[Function]}
                  >
                    <AnyOption>
                      <option
                        key="any"
                        value=""
                      >
                        Any
                      </option>
                    </AnyOption>
                    <option
                      key="Imaging"
                      value="Imaging"
                    >
                      Imaging
                    </option>
                    <option
                      key="Streaming"
                      value="Streaming"
                    >
                      Streaming
                    </option>
                  </select>
                </div>
              </SelectField>
            </div>
          </StyledComponent>
        </styled.div>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  Object {
                    "className": "sub-grid",
                  },
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dnqmqq",
                  "isStatic": true,
                  "lastClassName": "c1",
                  "rules": Array [
                    "
  && {
    text-align: left;
    padding-left: 10px;
  }
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dnqmqq",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sub-grid c1"
            >
              <p>
                Filter
              </p>
              <SelectField
                name="filter"
                onChange={[Function]}
              >
                <div
                  className="control select "
                >
                  <select
                    name="filter"
                    onChange={[Function]}
                  >
                    <AnyOption>
                      <option
                        key="any"
                        value=""
                      >
                        Any
                      </option>
                    </AnyOption>
                    <option
                      key="B"
                      value="B"
                    >
                      B
                    </option>
                    <option
                      key="H-alpha"
                      value="H-alpha"
                    >
                      H-alpha
                    </option>
                    <option
                      key="Open"
                      value="Open"
                    >
                      Open
                    </option>
                    <option
                      key="R"
                      value="R"
                    >
                      R
                    </option>
                    <option
                      key="U"
                      value="U"
                    >
                      U
                    </option>
                    <option
                      key="V"
                      value="V"
                    >
                      V
                    </option>
                  </select>
                </div>
              </SelectField>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</BVIT>
`;

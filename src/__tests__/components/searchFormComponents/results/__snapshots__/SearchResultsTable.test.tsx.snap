// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SearchResultsTable should render correctly with cart content 1`] = `
Array [
  .c3.c3 {
  width: 18px;
  height: 18px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c1 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 0px;
  z-index: 10;
}

.c2 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 40px;
  z-index: 10;
}

<styled.div
    data-test="search-results-table"
  >
    <StyledComponent
      data-test="search-results-table"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  flex-direction: row;
  position: relative;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
        data-test="search-results-table"
      >
        <styled.div
          top={0}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                    [Function],
                    "px;
  z-index: 10;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            top={0}
          >
            <div
              className="c1"
            >
              <Grid
                aria-label="grid"
                aria-readonly={true}
                autoContainerWidth={false}
                autoHeight={false}
                autoWidth={false}
                cellRangeRenderer={[Function]}
                cellRenderer={[Function]}
                className="HeaderGrid"
                columnCount={1}
                columnWidth={25}
                containerRole="rowgroup"
                containerStyle={Object {}}
                estimatedColumnSize={100}
                estimatedRowSize={30}
                getScrollbarSize={[Function]}
                height={40}
                isScrollingOptOut={false}
                noContentRenderer={[Function]}
                onScroll={[Function]}
                onScrollbarPresenceChange={[Function]}
                onSectionRendered={[Function]}
                overscanColumnCount={0}
                overscanIndicesGetter={[Function]}
                overscanRowCount={10}
                role="grid"
                rowCount={1}
                rowHeight={40}
                scrollToAlignment="auto"
                scrollToColumn={-1}
                scrollToRow={-1}
                scrollingResetTimeInterval={150}
                style={Object {}}
                tabIndex={0}
                width={25}
              >
                <div
                  aria-label="grid"
                  aria-readonly={true}
                  className="ReactVirtualized__Grid HeaderGrid"
                  onScroll={[Function]}
                  role="grid"
                  style={
                    Object {
                      "WebkitOverflowScrolling": "touch",
                      "boxSizing": "border-box",
                      "direction": "ltr",
                      "height": 40,
                      "overflowX": "hidden",
                      "overflowY": "hidden",
                      "position": "relative",
                      "width": 25,
                      "willChange": "transform",
                    }
                  }
                  tabIndex={0}
                >
                  <div
                    className="ReactVirtualized__Grid__innerScrollContainer"
                    role="rowgroup"
                    style={
                      Object {
                        "height": 40,
                        "maxHeight": 40,
                        "maxWidth": 25,
                        "overflow": "hidden",
                        "pointerEvents": "",
                        "position": "relative",
                        "width": 25,
                      }
                    }
                  >
                    <div
                      className="search-results header cell cart"
                      key="0-0"
                      style={
                        Object {
                          "height": 40,
                          "left": 0,
                          "position": "absolute",
                          "top": 0,
                          "width": 25,
                        }
                      }
                    >
                      <span>
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={false}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                576,
                                512,
                                Array [],
                                "f07a",
                                "M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z",
                              ],
                              "iconName": "shopping-cart",
                              "prefix": "fas",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-shopping-cart fa-w-18 "
                            data-icon="shopping-cart"
                            data-prefix="fas"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 576 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z"
                              fill="currentColor"
                              style={Object {}}
                            />
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </div>
                  </div>
                </div>
              </Grid>
            </div>
          </StyledComponent>
        </styled.div>
        <styled.div
          top={40}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                    [Function],
                    "px;
  z-index: 10;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            top={40}
          >
            <div
              className="c2"
            >
              <Grid
                aria-label="grid"
                aria-readonly={true}
                autoContainerWidth={false}
                autoHeight={false}
                autoWidth={false}
                cellRangeRenderer={[Function]}
                cellRenderer={[Function]}
                columnCount={1}
                columnWidth={25}
                containerRole="rowgroup"
                containerStyle={Object {}}
                estimatedColumnSize={100}
                estimatedRowSize={30}
                getScrollbarSize={[Function]}
                height={190}
                isScrollingOptOut={false}
                noContentRenderer={[Function]}
                onScroll={[Function]}
                onScrollbarPresenceChange={[Function]}
                onSectionRendered={[Function]}
                overscanColumnCount={0}
                overscanIndicesGetter={[Function]}
                overscanRowCount={10}
                role="grid"
                rowCount={5}
                rowHeight={30}
                scrollToAlignment="auto"
                scrollToColumn={-1}
                scrollToRow={-1}
                scrollTop={0}
                scrollingResetTimeInterval={150}
                style={
                  Object {
                    "overflow": "hidden",
                  }
                }
                tabIndex={0}
                width={25}
              >
                <div
                  aria-label="grid"
                  aria-readonly={true}
                  className="ReactVirtualized__Grid"
                  onScroll={[Function]}
                  role="grid"
                  style={
                    Object {
                      "WebkitOverflowScrolling": "touch",
                      "boxSizing": "border-box",
                      "direction": "ltr",
                      "height": 190,
                      "overflow": "hidden",
                      "overflowX": "hidden",
                      "overflowY": "hidden",
                      "position": "relative",
                      "width": 25,
                      "willChange": "transform",
                    }
                  }
                  tabIndex={0}
                >
                  <div
                    className="ReactVirtualized__Grid__innerScrollContainer"
                    role="rowgroup"
                    style={
                      Object {
                        "height": 150,
                        "maxHeight": 150,
                        "maxWidth": 25,
                        "overflow": "hidden",
                        "pointerEvents": "",
                        "position": "relative",
                        "width": 25,
                      }
                    }
                  >
                    <div
                      className="search-results cell observation-header"
                      key="0-0"
                      style={
                        Object {
                          "height": 30,
                          "left": 0,
                          "position": "absolute",
                          "top": 0,
                          "width": 25,
                        }
                      }
                    >
                      <span>
                        <styled.input
                          checked={true}
                          onChange={[Function]}
                        >
                          <StyledComponent
                            checked={true}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [
                                  Object {
                                    "className": "checkbox",
                                    "type": "checkbox",
                                  },
                                ],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": true,
                                  "lastClassName": "c3",
                                  "rules": Array [
                                    "
  && {
    width: 18px;
    height: 18px;
  }
",
                                  ],
                                },
                                "displayName": "styled.input",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "input",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onChange={[Function]}
                          >
                            <input
                              checked={true}
                              className="checkbox c3"
                              onChange={[Function]}
                              type="checkbox"
                            />
                          </StyledComponent>
                        </styled.input>
                      </span>
                    </div>
                    <div
                      className="search-results file-row-odd cell"
                      key="1-0"
                      style={
                        Object {
                          "height": 30,
                          "left": 0,
                          "position": "absolute",
                          "top": 30,
                          "width": 25,
                        }
                      }
                    >
                      <span>
                        <styled.input
                          checked={true}
                          data-test="observation-header-input"
                          onChange={[Function]}
                        >
                          <StyledComponent
                            checked={true}
                            data-test="observation-header-input"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [
                                  Object {
                                    "className": "checkbox",
                                    "type": "checkbox",
                                  },
                                ],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": true,
                                  "lastClassName": "c3",
                                  "rules": Array [
                                    "
  && {
    width: 18px;
    height: 18px;
  }
",
                                  ],
                                },
                                "displayName": "styled.input",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "input",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onChange={[Function]}
                          >
                            <input
                              checked={true}
                              className="checkbox c3"
                              data-test="observation-header-input"
                              onChange={[Function]}
                              type="checkbox"
                            />
                          </StyledComponent>
                        </styled.input>
                      </span>
                    </div>
                    <div
                      className="search-results cell observation-header"
                      key="2-0"
                      style={
                        Object {
                          "height": 30,
                          "left": 0,
                          "position": "absolute",
                          "top": 60,
                          "width": 25,
                        }
                      }
                    >
                      <span>
                        <styled.input
                          checked={false}
                          onChange={[Function]}
                        >
                          <StyledComponent
                            checked={false}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [
                                  Object {
                                    "className": "checkbox",
                                    "type": "checkbox",
                                  },
                                ],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": true,
                                  "lastClassName": "c3",
                                  "rules": Array [
                                    "
  && {
    width: 18px;
    height: 18px;
  }
",
                                  ],
                                },
                                "displayName": "styled.input",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "input",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onChange={[Function]}
                          >
                            <input
                              checked={false}
                              className="checkbox c3"
                              onChange={[Function]}
                              type="checkbox"
                            />
                          </StyledComponent>
                        </styled.input>
                      </span>
                    </div>
                    <div
                      className="search-results file-row-odd cell"
                      key="3-0"
                      style={
                        Object {
                          "height": 30,
                          "left": 0,
                          "position": "absolute",
                          "top": 90,
                          "width": 25,
                        }
                      }
                    >
                      <span>
                        <styled.input
                          checked={false}
                          data-test="observation-header-input"
                          onChange={[Function]}
                        >
                          <StyledComponent
                            checked={false}
                            data-test="observation-header-input"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [
                                  Object {
                                    "className": "checkbox",
                                    "type": "checkbox",
                                  },
                                ],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": true,
                                  "lastClassName": "c3",
                                  "rules": Array [
                                    "
  && {
    width: 18px;
    height: 18px;
  }
",
                                  ],
                                },
                                "displayName": "styled.input",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "input",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onChange={[Function]}
                          >
                            <input
                              checked={false}
                              className="checkbox c3"
                              data-test="observation-header-input"
                              onChange={[Function]}
                              type="checkbox"
                            />
                          </StyledComponent>
                        </styled.input>
                      </span>
                    </div>
                    <div
                      className="search-results file-row-even cell"
                      key="4-0"
                      style={
                        Object {
                          "height": 30,
                          "left": 0,
                          "position": "absolute",
                          "top": 120,
                          "width": 25,
                        }
                      }
                    >
                      <span>
                        <styled.input
                          checked={false}
                          data-test="observation-header-input"
                          onChange={[Function]}
                        >
                          <StyledComponent
                            checked={false}
                            data-test="observation-header-input"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [
                                  Object {
                                    "className": "checkbox",
                                    "type": "checkbox",
                                  },
                                ],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": true,
                                  "lastClassName": "c3",
                                  "rules": Array [
                                    "
  && {
    width: 18px;
    height: 18px;
  }
",
                                  ],
                                },
                                "displayName": "styled.input",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "input",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onChange={[Function]}
                          >
                            <input
                              checked={false}
                              className="checkbox c3"
                              data-test="observation-header-input"
                              onChange={[Function]}
                              type="checkbox"
                            />
                          </StyledComponent>
                        </styled.input>
                      </span>
                    </div>
                  </div>
                </div>
              </Grid>
            </div>
          </StyledComponent>
        </styled.div>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": true,
                  "lastClassName": "c4",
                  "rules": Array [
                    "
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c4"
            >
              <AutoSizer
                disableHeight={true}
                disableWidth={false}
                onResize={[Function]}
                style={Object {}}
              >
                <div
                  style={
                    Object {
                      "overflow": "visible",
                      "width": 0,
                    }
                  }
                >
                  <div>
                    <div
                      style={
                        Object {
                          "height": 40,
                          "width": 0,
                        }
                      }
                    >
                      <Grid
                        aria-label="grid"
                        aria-readonly={true}
                        autoContainerWidth={false}
                        autoHeight={false}
                        autoWidth={false}
                        cellRangeRenderer={[Function]}
                        cellRenderer={[Function]}
                        columnCount={2}
                        columnWidth={[Function]}
                        containerRole="rowgroup"
                        containerStyle={Object {}}
                        estimatedColumnSize={100}
                        estimatedRowSize={30}
                        getScrollbarSize={[Function]}
                        height={190}
                        isScrollingOptOut={false}
                        noContentRenderer={[Function]}
                        onScroll={[Function]}
                        onScrollbarPresenceChange={[Function]}
                        onSectionRendered={[Function]}
                        overscanColumnCount={0}
                        overscanIndicesGetter={[Function]}
                        overscanRowCount={10}
                        role="grid"
                        rowCount={1}
                        rowHeight={40}
                        scrollLeft={0}
                        scrollToAlignment="auto"
                        scrollToColumn={-1}
                        scrollToRow={-1}
                        scrollingResetTimeInterval={150}
                        style={
                          Object {
                            "overflow": "hidden",
                            "width": "100%",
                          }
                        }
                        tabIndex={0}
                        width={0}
                      >
                        <div
                          aria-label="grid"
                          aria-readonly={true}
                          className="ReactVirtualized__Grid"
                          onScroll={[Function]}
                          role="grid"
                          style={
                            Object {
                              "WebkitOverflowScrolling": "touch",
                              "boxSizing": "border-box",
                              "direction": "ltr",
                              "height": 190,
                              "overflow": "hidden",
                              "overflowX": "auto",
                              "overflowY": "hidden",
                              "position": "relative",
                              "width": "100%",
                              "willChange": "transform",
                            }
                          }
                          tabIndex={0}
                        />
                      </Grid>
                    </div>
                    <div
                      style={
                        Object {
                          "height": 190,
                          "width": 0,
                        }
                      }
                    >
                      <Grid
                        aria-label="grid"
                        aria-readonly={true}
                        autoContainerWidth={false}
                        autoHeight={false}
                        autoWidth={false}
                        cellRangeRenderer={[Function]}
                        cellRenderer={[Function]}
                        columnCount={2}
                        columnWidth={[Function]}
                        containerRole="rowgroup"
                        containerStyle={Object {}}
                        estimatedColumnSize={100}
                        estimatedRowSize={30}
                        getScrollbarSize={[Function]}
                        height={190}
                        isScrollingOptOut={false}
                        noContentRenderer={[Function]}
                        onScroll={[Function]}
                        onScrollbarPresenceChange={[Function]}
                        onSectionRendered={[Function]}
                        overscanColumnCount={0}
                        overscanIndicesGetter={[Function]}
                        overscanRowCount={10}
                        role="grid"
                        rowCount={5}
                        rowHeight={30}
                        scrollToAlignment="auto"
                        scrollToColumn={-1}
                        scrollToRow={-1}
                        scrollingResetTimeInterval={150}
                        style={
                          Object {
                            "width": "100%",
                          }
                        }
                        tabIndex={0}
                        width={0}
                      >
                        <div
                          aria-label="grid"
                          aria-readonly={true}
                          className="ReactVirtualized__Grid"
                          onScroll={[Function]}
                          role="grid"
                          style={
                            Object {
                              "WebkitOverflowScrolling": "touch",
                              "boxSizing": "border-box",
                              "direction": "ltr",
                              "height": 190,
                              "overflowX": "auto",
                              "overflowY": "hidden",
                              "position": "relative",
                              "width": "100%",
                              "willChange": "transform",
                            }
                          }
                          tabIndex={0}
                        />
                      </Grid>
                    </div>
                  </div>
                </div>
              </AutoSizer>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>,
  .c3.c3 {
  width: 18px;
  height: 18px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c1 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 0px;
  z-index: 10;
}

.c2 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 40px;
  z-index: 10;
}

<StyledComponent
    data-test="search-results-table"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": true,
          "lastClassName": "c0",
          "rules": Array [
            "
  display: flex;
  flex-direction: row;
  position: relative;
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <div
      className="c0"
      data-test="search-results-table"
    >
      <styled.div
        top={0}
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bxivhb",
                "isStatic": false,
                "lastClassName": "c2",
                "rules": Array [
                  "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                  [Function],
                  "px;
  z-index: 10;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bxivhb",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          top={0}
        >
          <div
            className="c1"
          >
            <Grid
              aria-label="grid"
              aria-readonly={true}
              autoContainerWidth={false}
              autoHeight={false}
              autoWidth={false}
              cellRangeRenderer={[Function]}
              cellRenderer={[Function]}
              className="HeaderGrid"
              columnCount={1}
              columnWidth={25}
              containerRole="rowgroup"
              containerStyle={Object {}}
              estimatedColumnSize={100}
              estimatedRowSize={30}
              getScrollbarSize={[Function]}
              height={40}
              isScrollingOptOut={false}
              noContentRenderer={[Function]}
              onScroll={[Function]}
              onScrollbarPresenceChange={[Function]}
              onSectionRendered={[Function]}
              overscanColumnCount={0}
              overscanIndicesGetter={[Function]}
              overscanRowCount={10}
              role="grid"
              rowCount={1}
              rowHeight={40}
              scrollToAlignment="auto"
              scrollToColumn={-1}
              scrollToRow={-1}
              scrollingResetTimeInterval={150}
              style={Object {}}
              tabIndex={0}
              width={25}
            >
              <div
                aria-label="grid"
                aria-readonly={true}
                className="ReactVirtualized__Grid HeaderGrid"
                onScroll={[Function]}
                role="grid"
                style={
                  Object {
                    "WebkitOverflowScrolling": "touch",
                    "boxSizing": "border-box",
                    "direction": "ltr",
                    "height": 40,
                    "overflowX": "hidden",
                    "overflowY": "hidden",
                    "position": "relative",
                    "width": 25,
                    "willChange": "transform",
                  }
                }
                tabIndex={0}
              >
                <div
                  className="ReactVirtualized__Grid__innerScrollContainer"
                  role="rowgroup"
                  style={
                    Object {
                      "height": 40,
                      "maxHeight": 40,
                      "maxWidth": 25,
                      "overflow": "hidden",
                      "pointerEvents": "",
                      "position": "relative",
                      "width": 25,
                    }
                  }
                >
                  <div
                    className="search-results header cell cart"
                    key="0-0"
                    style={
                      Object {
                        "height": 40,
                        "left": 0,
                        "position": "absolute",
                        "top": 0,
                        "width": 25,
                      }
                    }
                  >
                    <span>
                      <FontAwesomeIcon
                        border={false}
                        className=""
                        fixedWidth={false}
                        flip={null}
                        icon={
                          Object {
                            "icon": Array [
                              576,
                              512,
                              Array [],
                              "f07a",
                              "M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z",
                            ],
                            "iconName": "shopping-cart",
                            "prefix": "fas",
                          }
                        }
                        inverse={false}
                        listItem={false}
                        mask={null}
                        pull={null}
                        pulse={false}
                        rotation={null}
                        size={null}
                        spin={false}
                        symbol={false}
                        title=""
                        transform={null}
                      >
                        <svg
                          aria-hidden="true"
                          className="svg-inline--fa fa-shopping-cart fa-w-18 "
                          data-icon="shopping-cart"
                          data-prefix="fas"
                          focusable="false"
                          role="img"
                          style={Object {}}
                          viewBox="0 0 576 512"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z"
                            fill="currentColor"
                            style={Object {}}
                          />
                        </svg>
                      </FontAwesomeIcon>
                    </span>
                  </div>
                </div>
              </div>
            </Grid>
          </div>
        </StyledComponent>
      </styled.div>
      <styled.div
        top={40}
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bxivhb",
                "isStatic": false,
                "lastClassName": "c2",
                "rules": Array [
                  "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                  [Function],
                  "px;
  z-index: 10;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bxivhb",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          top={40}
        >
          <div
            className="c2"
          >
            <Grid
              aria-label="grid"
              aria-readonly={true}
              autoContainerWidth={false}
              autoHeight={false}
              autoWidth={false}
              cellRangeRenderer={[Function]}
              cellRenderer={[Function]}
              columnCount={1}
              columnWidth={25}
              containerRole="rowgroup"
              containerStyle={Object {}}
              estimatedColumnSize={100}
              estimatedRowSize={30}
              getScrollbarSize={[Function]}
              height={190}
              isScrollingOptOut={false}
              noContentRenderer={[Function]}
              onScroll={[Function]}
              onScrollbarPresenceChange={[Function]}
              onSectionRendered={[Function]}
              overscanColumnCount={0}
              overscanIndicesGetter={[Function]}
              overscanRowCount={10}
              role="grid"
              rowCount={5}
              rowHeight={30}
              scrollToAlignment="auto"
              scrollToColumn={-1}
              scrollToRow={-1}
              scrollTop={0}
              scrollingResetTimeInterval={150}
              style={
                Object {
                  "overflow": "hidden",
                }
              }
              tabIndex={0}
              width={25}
            >
              <div
                aria-label="grid"
                aria-readonly={true}
                className="ReactVirtualized__Grid"
                onScroll={[Function]}
                role="grid"
                style={
                  Object {
                    "WebkitOverflowScrolling": "touch",
                    "boxSizing": "border-box",
                    "direction": "ltr",
                    "height": 190,
                    "overflow": "hidden",
                    "overflowX": "hidden",
                    "overflowY": "hidden",
                    "position": "relative",
                    "width": 25,
                    "willChange": "transform",
                  }
                }
                tabIndex={0}
              >
                <div
                  className="ReactVirtualized__Grid__innerScrollContainer"
                  role="rowgroup"
                  style={
                    Object {
                      "height": 150,
                      "maxHeight": 150,
                      "maxWidth": 25,
                      "overflow": "hidden",
                      "pointerEvents": "",
                      "position": "relative",
                      "width": 25,
                    }
                  }
                >
                  <div
                    className="search-results cell observation-header"
                    key="0-0"
                    style={
                      Object {
                        "height": 30,
                        "left": 0,
                        "position": "absolute",
                        "top": 0,
                        "width": 25,
                      }
                    }
                  >
                    <span>
                      <styled.input
                        checked={true}
                        onChange={[Function]}
                      >
                        <StyledComponent
                          checked={true}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {
                                  "className": "checkbox",
                                  "type": "checkbox",
                                },
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  && {
    width: 18px;
    height: 18px;
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onChange={[Function]}
                        >
                          <input
                            checked={true}
                            className="checkbox c3"
                            onChange={[Function]}
                            type="checkbox"
                          />
                        </StyledComponent>
                      </styled.input>
                    </span>
                  </div>
                  <div
                    className="search-results file-row-odd cell"
                    key="1-0"
                    style={
                      Object {
                        "height": 30,
                        "left": 0,
                        "position": "absolute",
                        "top": 30,
                        "width": 25,
                      }
                    }
                  >
                    <span>
                      <styled.input
                        checked={true}
                        data-test="observation-header-input"
                        onChange={[Function]}
                      >
                        <StyledComponent
                          checked={true}
                          data-test="observation-header-input"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {
                                  "className": "checkbox",
                                  "type": "checkbox",
                                },
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  && {
    width: 18px;
    height: 18px;
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onChange={[Function]}
                        >
                          <input
                            checked={true}
                            className="checkbox c3"
                            data-test="observation-header-input"
                            onChange={[Function]}
                            type="checkbox"
                          />
                        </StyledComponent>
                      </styled.input>
                    </span>
                  </div>
                  <div
                    className="search-results cell observation-header"
                    key="2-0"
                    style={
                      Object {
                        "height": 30,
                        "left": 0,
                        "position": "absolute",
                        "top": 60,
                        "width": 25,
                      }
                    }
                  >
                    <span>
                      <styled.input
                        checked={false}
                        onChange={[Function]}
                      >
                        <StyledComponent
                          checked={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {
                                  "className": "checkbox",
                                  "type": "checkbox",
                                },
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  && {
    width: 18px;
    height: 18px;
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onChange={[Function]}
                        >
                          <input
                            checked={false}
                            className="checkbox c3"
                            onChange={[Function]}
                            type="checkbox"
                          />
                        </StyledComponent>
                      </styled.input>
                    </span>
                  </div>
                  <div
                    className="search-results file-row-odd cell"
                    key="3-0"
                    style={
                      Object {
                        "height": 30,
                        "left": 0,
                        "position": "absolute",
                        "top": 90,
                        "width": 25,
                      }
                    }
                  >
                    <span>
                      <styled.input
                        checked={false}
                        data-test="observation-header-input"
                        onChange={[Function]}
                      >
                        <StyledComponent
                          checked={false}
                          data-test="observation-header-input"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {
                                  "className": "checkbox",
                                  "type": "checkbox",
                                },
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  && {
    width: 18px;
    height: 18px;
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onChange={[Function]}
                        >
                          <input
                            checked={false}
                            className="checkbox c3"
                            data-test="observation-header-input"
                            onChange={[Function]}
                            type="checkbox"
                          />
                        </StyledComponent>
                      </styled.input>
                    </span>
                  </div>
                  <div
                    className="search-results file-row-even cell"
                    key="4-0"
                    style={
                      Object {
                        "height": 30,
                        "left": 0,
                        "position": "absolute",
                        "top": 120,
                        "width": 25,
                      }
                    }
                  >
                    <span>
                      <styled.input
                        checked={false}
                        data-test="observation-header-input"
                        onChange={[Function]}
                      >
                        <StyledComponent
                          checked={false}
                          data-test="observation-header-input"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {
                                  "className": "checkbox",
                                  "type": "checkbox",
                                },
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  && {
    width: 18px;
    height: 18px;
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onChange={[Function]}
                        >
                          <input
                            checked={false}
                            className="checkbox c3"
                            data-test="observation-header-input"
                            onChange={[Function]}
                            type="checkbox"
                          />
                        </StyledComponent>
                      </styled.input>
                    </span>
                  </div>
                </div>
              </div>
            </Grid>
          </div>
        </StyledComponent>
      </styled.div>
      <styled.div>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-htpNat",
                "isStatic": true,
                "lastClassName": "c4",
                "rules": Array [
                  "
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-htpNat",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c4"
          >
            <AutoSizer
              disableHeight={true}
              disableWidth={false}
              onResize={[Function]}
              style={Object {}}
            >
              <div
                style={
                  Object {
                    "overflow": "visible",
                    "width": 0,
                  }
                }
              >
                <div>
                  <div
                    style={
                      Object {
                        "height": 40,
                        "width": 0,
                      }
                    }
                  >
                    <Grid
                      aria-label="grid"
                      aria-readonly={true}
                      autoContainerWidth={false}
                      autoHeight={false}
                      autoWidth={false}
                      cellRangeRenderer={[Function]}
                      cellRenderer={[Function]}
                      columnCount={2}
                      columnWidth={[Function]}
                      containerRole="rowgroup"
                      containerStyle={Object {}}
                      estimatedColumnSize={100}
                      estimatedRowSize={30}
                      getScrollbarSize={[Function]}
                      height={190}
                      isScrollingOptOut={false}
                      noContentRenderer={[Function]}
                      onScroll={[Function]}
                      onScrollbarPresenceChange={[Function]}
                      onSectionRendered={[Function]}
                      overscanColumnCount={0}
                      overscanIndicesGetter={[Function]}
                      overscanRowCount={10}
                      role="grid"
                      rowCount={1}
                      rowHeight={40}
                      scrollLeft={0}
                      scrollToAlignment="auto"
                      scrollToColumn={-1}
                      scrollToRow={-1}
                      scrollingResetTimeInterval={150}
                      style={
                        Object {
                          "overflow": "hidden",
                          "width": "100%",
                        }
                      }
                      tabIndex={0}
                      width={0}
                    >
                      <div
                        aria-label="grid"
                        aria-readonly={true}
                        className="ReactVirtualized__Grid"
                        onScroll={[Function]}
                        role="grid"
                        style={
                          Object {
                            "WebkitOverflowScrolling": "touch",
                            "boxSizing": "border-box",
                            "direction": "ltr",
                            "height": 190,
                            "overflow": "hidden",
                            "overflowX": "auto",
                            "overflowY": "hidden",
                            "position": "relative",
                            "width": "100%",
                            "willChange": "transform",
                          }
                        }
                        tabIndex={0}
                      />
                    </Grid>
                  </div>
                  <div
                    style={
                      Object {
                        "height": 190,
                        "width": 0,
                      }
                    }
                  >
                    <Grid
                      aria-label="grid"
                      aria-readonly={true}
                      autoContainerWidth={false}
                      autoHeight={false}
                      autoWidth={false}
                      cellRangeRenderer={[Function]}
                      cellRenderer={[Function]}
                      columnCount={2}
                      columnWidth={[Function]}
                      containerRole="rowgroup"
                      containerStyle={Object {}}
                      estimatedColumnSize={100}
                      estimatedRowSize={30}
                      getScrollbarSize={[Function]}
                      height={190}
                      isScrollingOptOut={false}
                      noContentRenderer={[Function]}
                      onScroll={[Function]}
                      onScrollbarPresenceChange={[Function]}
                      onSectionRendered={[Function]}
                      overscanColumnCount={0}
                      overscanIndicesGetter={[Function]}
                      overscanRowCount={10}
                      role="grid"
                      rowCount={5}
                      rowHeight={30}
                      scrollToAlignment="auto"
                      scrollToColumn={-1}
                      scrollToRow={-1}
                      scrollingResetTimeInterval={150}
                      style={
                        Object {
                          "width": "100%",
                        }
                      }
                      tabIndex={0}
                      width={0}
                    >
                      <div
                        aria-label="grid"
                        aria-readonly={true}
                        className="ReactVirtualized__Grid"
                        onScroll={[Function]}
                        role="grid"
                        style={
                          Object {
                            "WebkitOverflowScrolling": "touch",
                            "boxSizing": "border-box",
                            "direction": "ltr",
                            "height": 190,
                            "overflowX": "auto",
                            "overflowY": "hidden",
                            "position": "relative",
                            "width": "100%",
                            "willChange": "transform",
                          }
                        }
                        tabIndex={0}
                      />
                    </Grid>
                  </div>
                </div>
              </div>
            </AutoSizer>
          </div>
        </StyledComponent>
      </styled.div>
    </div>
  </StyledComponent>,
  .c3.c3 {
  width: 18px;
  height: 18px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c1 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 0px;
  z-index: 10;
}

.c2 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 40px;
  z-index: 10;
}

<div
    className="c0"
    data-test="search-results-table"
  >
    <styled.div
      top={0}
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bxivhb",
              "isStatic": false,
              "lastClassName": "c2",
              "rules": Array [
                "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                [Function],
                "px;
  z-index: 10;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bxivhb",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        top={0}
      >
        <div
          className="c1"
        >
          <Grid
            aria-label="grid"
            aria-readonly={true}
            autoContainerWidth={false}
            autoHeight={false}
            autoWidth={false}
            cellRangeRenderer={[Function]}
            cellRenderer={[Function]}
            className="HeaderGrid"
            columnCount={1}
            columnWidth={25}
            containerRole="rowgroup"
            containerStyle={Object {}}
            estimatedColumnSize={100}
            estimatedRowSize={30}
            getScrollbarSize={[Function]}
            height={40}
            isScrollingOptOut={false}
            noContentRenderer={[Function]}
            onScroll={[Function]}
            onScrollbarPresenceChange={[Function]}
            onSectionRendered={[Function]}
            overscanColumnCount={0}
            overscanIndicesGetter={[Function]}
            overscanRowCount={10}
            role="grid"
            rowCount={1}
            rowHeight={40}
            scrollToAlignment="auto"
            scrollToColumn={-1}
            scrollToRow={-1}
            scrollingResetTimeInterval={150}
            style={Object {}}
            tabIndex={0}
            width={25}
          >
            <div
              aria-label="grid"
              aria-readonly={true}
              className="ReactVirtualized__Grid HeaderGrid"
              onScroll={[Function]}
              role="grid"
              style={
                Object {
                  "WebkitOverflowScrolling": "touch",
                  "boxSizing": "border-box",
                  "direction": "ltr",
                  "height": 40,
                  "overflowX": "hidden",
                  "overflowY": "hidden",
                  "position": "relative",
                  "width": 25,
                  "willChange": "transform",
                }
              }
              tabIndex={0}
            >
              <div
                className="ReactVirtualized__Grid__innerScrollContainer"
                role="rowgroup"
                style={
                  Object {
                    "height": 40,
                    "maxHeight": 40,
                    "maxWidth": 25,
                    "overflow": "hidden",
                    "pointerEvents": "",
                    "position": "relative",
                    "width": 25,
                  }
                }
              >
                <div
                  className="search-results header cell cart"
                  key="0-0"
                  style={
                    Object {
                      "height": 40,
                      "left": 0,
                      "position": "absolute",
                      "top": 0,
                      "width": 25,
                    }
                  }
                >
                  <span>
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      fixedWidth={false}
                      flip={null}
                      icon={
                        Object {
                          "icon": Array [
                            576,
                            512,
                            Array [],
                            "f07a",
                            "M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z",
                          ],
                          "iconName": "shopping-cart",
                          "prefix": "fas",
                        }
                      }
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size={null}
                      spin={false}
                      symbol={false}
                      title=""
                      transform={null}
                    >
                      <svg
                        aria-hidden="true"
                        className="svg-inline--fa fa-shopping-cart fa-w-18 "
                        data-icon="shopping-cart"
                        data-prefix="fas"
                        focusable="false"
                        role="img"
                        style={Object {}}
                        viewBox="0 0 576 512"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z"
                          fill="currentColor"
                          style={Object {}}
                        />
                      </svg>
                    </FontAwesomeIcon>
                  </span>
                </div>
              </div>
            </div>
          </Grid>
        </div>
      </StyledComponent>
    </styled.div>
    <styled.div
      top={40}
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bxivhb",
              "isStatic": false,
              "lastClassName": "c2",
              "rules": Array [
                "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                [Function],
                "px;
  z-index: 10;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bxivhb",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        top={40}
      >
        <div
          className="c2"
        >
          <Grid
            aria-label="grid"
            aria-readonly={true}
            autoContainerWidth={false}
            autoHeight={false}
            autoWidth={false}
            cellRangeRenderer={[Function]}
            cellRenderer={[Function]}
            columnCount={1}
            columnWidth={25}
            containerRole="rowgroup"
            containerStyle={Object {}}
            estimatedColumnSize={100}
            estimatedRowSize={30}
            getScrollbarSize={[Function]}
            height={190}
            isScrollingOptOut={false}
            noContentRenderer={[Function]}
            onScroll={[Function]}
            onScrollbarPresenceChange={[Function]}
            onSectionRendered={[Function]}
            overscanColumnCount={0}
            overscanIndicesGetter={[Function]}
            overscanRowCount={10}
            role="grid"
            rowCount={5}
            rowHeight={30}
            scrollToAlignment="auto"
            scrollToColumn={-1}
            scrollToRow={-1}
            scrollTop={0}
            scrollingResetTimeInterval={150}
            style={
              Object {
                "overflow": "hidden",
              }
            }
            tabIndex={0}
            width={25}
          >
            <div
              aria-label="grid"
              aria-readonly={true}
              className="ReactVirtualized__Grid"
              onScroll={[Function]}
              role="grid"
              style={
                Object {
                  "WebkitOverflowScrolling": "touch",
                  "boxSizing": "border-box",
                  "direction": "ltr",
                  "height": 190,
                  "overflow": "hidden",
                  "overflowX": "hidden",
                  "overflowY": "hidden",
                  "position": "relative",
                  "width": 25,
                  "willChange": "transform",
                }
              }
              tabIndex={0}
            >
              <div
                className="ReactVirtualized__Grid__innerScrollContainer"
                role="rowgroup"
                style={
                  Object {
                    "height": 150,
                    "maxHeight": 150,
                    "maxWidth": 25,
                    "overflow": "hidden",
                    "pointerEvents": "",
                    "position": "relative",
                    "width": 25,
                  }
                }
              >
                <div
                  className="search-results cell observation-header"
                  key="0-0"
                  style={
                    Object {
                      "height": 30,
                      "left": 0,
                      "position": "absolute",
                      "top": 0,
                      "width": 25,
                    }
                  }
                >
                  <span>
                    <styled.input
                      checked={true}
                      onChange={[Function]}
                    >
                      <StyledComponent
                        checked={true}
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {
                                "className": "checkbox",
                                "type": "checkbox",
                              },
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bdVaJa",
                              "isStatic": true,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
  && {
    width: 18px;
    height: 18px;
  }
",
                              ],
                            },
                            "displayName": "styled.input",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bdVaJa",
                            "target": "input",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onChange={[Function]}
                      >
                        <input
                          checked={true}
                          className="checkbox c3"
                          onChange={[Function]}
                          type="checkbox"
                        />
                      </StyledComponent>
                    </styled.input>
                  </span>
                </div>
                <div
                  className="search-results file-row-odd cell"
                  key="1-0"
                  style={
                    Object {
                      "height": 30,
                      "left": 0,
                      "position": "absolute",
                      "top": 30,
                      "width": 25,
                    }
                  }
                >
                  <span>
                    <styled.input
                      checked={true}
                      data-test="observation-header-input"
                      onChange={[Function]}
                    >
                      <StyledComponent
                        checked={true}
                        data-test="observation-header-input"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {
                                "className": "checkbox",
                                "type": "checkbox",
                              },
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bdVaJa",
                              "isStatic": true,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
  && {
    width: 18px;
    height: 18px;
  }
",
                              ],
                            },
                            "displayName": "styled.input",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bdVaJa",
                            "target": "input",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onChange={[Function]}
                      >
                        <input
                          checked={true}
                          className="checkbox c3"
                          data-test="observation-header-input"
                          onChange={[Function]}
                          type="checkbox"
                        />
                      </StyledComponent>
                    </styled.input>
                  </span>
                </div>
                <div
                  className="search-results cell observation-header"
                  key="2-0"
                  style={
                    Object {
                      "height": 30,
                      "left": 0,
                      "position": "absolute",
                      "top": 60,
                      "width": 25,
                    }
                  }
                >
                  <span>
                    <styled.input
                      checked={false}
                      onChange={[Function]}
                    >
                      <StyledComponent
                        checked={false}
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {
                                "className": "checkbox",
                                "type": "checkbox",
                              },
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bdVaJa",
                              "isStatic": true,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
  && {
    width: 18px;
    height: 18px;
  }
",
                              ],
                            },
                            "displayName": "styled.input",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bdVaJa",
                            "target": "input",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onChange={[Function]}
                      >
                        <input
                          checked={false}
                          className="checkbox c3"
                          onChange={[Function]}
                          type="checkbox"
                        />
                      </StyledComponent>
                    </styled.input>
                  </span>
                </div>
                <div
                  className="search-results file-row-odd cell"
                  key="3-0"
                  style={
                    Object {
                      "height": 30,
                      "left": 0,
                      "position": "absolute",
                      "top": 90,
                      "width": 25,
                    }
                  }
                >
                  <span>
                    <styled.input
                      checked={false}
                      data-test="observation-header-input"
                      onChange={[Function]}
                    >
                      <StyledComponent
                        checked={false}
                        data-test="observation-header-input"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {
                                "className": "checkbox",
                                "type": "checkbox",
                              },
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bdVaJa",
                              "isStatic": true,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
  && {
    width: 18px;
    height: 18px;
  }
",
                              ],
                            },
                            "displayName": "styled.input",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bdVaJa",
                            "target": "input",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onChange={[Function]}
                      >
                        <input
                          checked={false}
                          className="checkbox c3"
                          data-test="observation-header-input"
                          onChange={[Function]}
                          type="checkbox"
                        />
                      </StyledComponent>
                    </styled.input>
                  </span>
                </div>
                <div
                  className="search-results file-row-even cell"
                  key="4-0"
                  style={
                    Object {
                      "height": 30,
                      "left": 0,
                      "position": "absolute",
                      "top": 120,
                      "width": 25,
                    }
                  }
                >
                  <span>
                    <styled.input
                      checked={false}
                      data-test="observation-header-input"
                      onChange={[Function]}
                    >
                      <StyledComponent
                        checked={false}
                        data-test="observation-header-input"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {
                                "className": "checkbox",
                                "type": "checkbox",
                              },
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bdVaJa",
                              "isStatic": true,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
  && {
    width: 18px;
    height: 18px;
  }
",
                              ],
                            },
                            "displayName": "styled.input",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bdVaJa",
                            "target": "input",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onChange={[Function]}
                      >
                        <input
                          checked={false}
                          className="checkbox c3"
                          data-test="observation-header-input"
                          onChange={[Function]}
                          type="checkbox"
                        />
                      </StyledComponent>
                    </styled.input>
                  </span>
                </div>
              </div>
            </div>
          </Grid>
        </div>
      </StyledComponent>
    </styled.div>
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htpNat",
              "isStatic": true,
              "lastClassName": "c4",
              "rules": Array [
                "
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htpNat",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="c4"
        >
          <AutoSizer
            disableHeight={true}
            disableWidth={false}
            onResize={[Function]}
            style={Object {}}
          >
            <div
              style={
                Object {
                  "overflow": "visible",
                  "width": 0,
                }
              }
            >
              <div>
                <div
                  style={
                    Object {
                      "height": 40,
                      "width": 0,
                    }
                  }
                >
                  <Grid
                    aria-label="grid"
                    aria-readonly={true}
                    autoContainerWidth={false}
                    autoHeight={false}
                    autoWidth={false}
                    cellRangeRenderer={[Function]}
                    cellRenderer={[Function]}
                    columnCount={2}
                    columnWidth={[Function]}
                    containerRole="rowgroup"
                    containerStyle={Object {}}
                    estimatedColumnSize={100}
                    estimatedRowSize={30}
                    getScrollbarSize={[Function]}
                    height={190}
                    isScrollingOptOut={false}
                    noContentRenderer={[Function]}
                    onScroll={[Function]}
                    onScrollbarPresenceChange={[Function]}
                    onSectionRendered={[Function]}
                    overscanColumnCount={0}
                    overscanIndicesGetter={[Function]}
                    overscanRowCount={10}
                    role="grid"
                    rowCount={1}
                    rowHeight={40}
                    scrollLeft={0}
                    scrollToAlignment="auto"
                    scrollToColumn={-1}
                    scrollToRow={-1}
                    scrollingResetTimeInterval={150}
                    style={
                      Object {
                        "overflow": "hidden",
                        "width": "100%",
                      }
                    }
                    tabIndex={0}
                    width={0}
                  >
                    <div
                      aria-label="grid"
                      aria-readonly={true}
                      className="ReactVirtualized__Grid"
                      onScroll={[Function]}
                      role="grid"
                      style={
                        Object {
                          "WebkitOverflowScrolling": "touch",
                          "boxSizing": "border-box",
                          "direction": "ltr",
                          "height": 190,
                          "overflow": "hidden",
                          "overflowX": "auto",
                          "overflowY": "hidden",
                          "position": "relative",
                          "width": "100%",
                          "willChange": "transform",
                        }
                      }
                      tabIndex={0}
                    />
                  </Grid>
                </div>
                <div
                  style={
                    Object {
                      "height": 190,
                      "width": 0,
                    }
                  }
                >
                  <Grid
                    aria-label="grid"
                    aria-readonly={true}
                    autoContainerWidth={false}
                    autoHeight={false}
                    autoWidth={false}
                    cellRangeRenderer={[Function]}
                    cellRenderer={[Function]}
                    columnCount={2}
                    columnWidth={[Function]}
                    containerRole="rowgroup"
                    containerStyle={Object {}}
                    estimatedColumnSize={100}
                    estimatedRowSize={30}
                    getScrollbarSize={[Function]}
                    height={190}
                    isScrollingOptOut={false}
                    noContentRenderer={[Function]}
                    onScroll={[Function]}
                    onScrollbarPresenceChange={[Function]}
                    onSectionRendered={[Function]}
                    overscanColumnCount={0}
                    overscanIndicesGetter={[Function]}
                    overscanRowCount={10}
                    role="grid"
                    rowCount={5}
                    rowHeight={30}
                    scrollToAlignment="auto"
                    scrollToColumn={-1}
                    scrollToRow={-1}
                    scrollingResetTimeInterval={150}
                    style={
                      Object {
                        "width": "100%",
                      }
                    }
                    tabIndex={0}
                    width={0}
                  >
                    <div
                      aria-label="grid"
                      aria-readonly={true}
                      className="ReactVirtualized__Grid"
                      onScroll={[Function]}
                      role="grid"
                      style={
                        Object {
                          "WebkitOverflowScrolling": "touch",
                          "boxSizing": "border-box",
                          "direction": "ltr",
                          "height": 190,
                          "overflowX": "auto",
                          "overflowY": "hidden",
                          "position": "relative",
                          "width": "100%",
                          "willChange": "transform",
                        }
                      }
                      tabIndex={0}
                    />
                  </Grid>
                </div>
              </div>
            </div>
          </AutoSizer>
        </div>
      </StyledComponent>
    </styled.div>
  </div>,
]
`;

exports[`SearchResultsTable should render correctly with no cart content 1`] = `
Array [
  .c3.c3 {
  width: 18px;
  height: 18px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c1 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 0px;
  z-index: 10;
}

.c2 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 40px;
  z-index: 10;
}

<styled.div
    data-test="search-results-table"
  >
    <StyledComponent
      data-test="search-results-table"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  flex-direction: row;
  position: relative;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
        data-test="search-results-table"
      >
        <styled.div
          top={0}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                    [Function],
                    "px;
  z-index: 10;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            top={0}
          >
            <div
              className="c1"
            >
              <Grid
                aria-label="grid"
                aria-readonly={true}
                autoContainerWidth={false}
                autoHeight={false}
                autoWidth={false}
                cellRangeRenderer={[Function]}
                cellRenderer={[Function]}
                className="HeaderGrid"
                columnCount={1}
                columnWidth={25}
                containerRole="rowgroup"
                containerStyle={Object {}}
                estimatedColumnSize={100}
                estimatedRowSize={30}
                getScrollbarSize={[Function]}
                height={40}
                isScrollingOptOut={false}
                noContentRenderer={[Function]}
                onScroll={[Function]}
                onScrollbarPresenceChange={[Function]}
                onSectionRendered={[Function]}
                overscanColumnCount={0}
                overscanIndicesGetter={[Function]}
                overscanRowCount={10}
                role="grid"
                rowCount={1}
                rowHeight={40}
                scrollToAlignment="auto"
                scrollToColumn={-1}
                scrollToRow={-1}
                scrollingResetTimeInterval={150}
                style={Object {}}
                tabIndex={0}
                width={25}
              >
                <div
                  aria-label="grid"
                  aria-readonly={true}
                  className="ReactVirtualized__Grid HeaderGrid"
                  onScroll={[Function]}
                  role="grid"
                  style={
                    Object {
                      "WebkitOverflowScrolling": "touch",
                      "boxSizing": "border-box",
                      "direction": "ltr",
                      "height": 40,
                      "overflowX": "hidden",
                      "overflowY": "hidden",
                      "position": "relative",
                      "width": 25,
                      "willChange": "transform",
                    }
                  }
                  tabIndex={0}
                >
                  <div
                    className="ReactVirtualized__Grid__innerScrollContainer"
                    role="rowgroup"
                    style={
                      Object {
                        "height": 40,
                        "maxHeight": 40,
                        "maxWidth": 25,
                        "overflow": "hidden",
                        "pointerEvents": "",
                        "position": "relative",
                        "width": 25,
                      }
                    }
                  >
                    <div
                      className="search-results header cell cart"
                      key="0-0"
                      style={
                        Object {
                          "height": 40,
                          "left": 0,
                          "position": "absolute",
                          "top": 0,
                          "width": 25,
                        }
                      }
                    >
                      <span>
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={false}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                576,
                                512,
                                Array [],
                                "f07a",
                                "M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z",
                              ],
                              "iconName": "shopping-cart",
                              "prefix": "fas",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-shopping-cart fa-w-18 "
                            data-icon="shopping-cart"
                            data-prefix="fas"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 576 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z"
                              fill="currentColor"
                              style={Object {}}
                            />
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </div>
                  </div>
                </div>
              </Grid>
            </div>
          </StyledComponent>
        </styled.div>
        <styled.div
          top={40}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                    [Function],
                    "px;
  z-index: 10;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            top={40}
          >
            <div
              className="c2"
            >
              <Grid
                aria-label="grid"
                aria-readonly={true}
                autoContainerWidth={false}
                autoHeight={false}
                autoWidth={false}
                cellRangeRenderer={[Function]}
                cellRenderer={[Function]}
                columnCount={1}
                columnWidth={25}
                containerRole="rowgroup"
                containerStyle={Object {}}
                estimatedColumnSize={100}
                estimatedRowSize={30}
                getScrollbarSize={[Function]}
                height={190}
                isScrollingOptOut={false}
                noContentRenderer={[Function]}
                onScroll={[Function]}
                onScrollbarPresenceChange={[Function]}
                onSectionRendered={[Function]}
                overscanColumnCount={0}
                overscanIndicesGetter={[Function]}
                overscanRowCount={10}
                role="grid"
                rowCount={5}
                rowHeight={30}
                scrollToAlignment="auto"
                scrollToColumn={-1}
                scrollToRow={-1}
                scrollTop={0}
                scrollingResetTimeInterval={150}
                style={
                  Object {
                    "overflow": "hidden",
                  }
                }
                tabIndex={0}
                width={25}
              >
                <div
                  aria-label="grid"
                  aria-readonly={true}
                  className="ReactVirtualized__Grid"
                  onScroll={[Function]}
                  role="grid"
                  style={
                    Object {
                      "WebkitOverflowScrolling": "touch",
                      "boxSizing": "border-box",
                      "direction": "ltr",
                      "height": 190,
                      "overflow": "hidden",
                      "overflowX": "hidden",
                      "overflowY": "hidden",
                      "position": "relative",
                      "width": 25,
                      "willChange": "transform",
                    }
                  }
                  tabIndex={0}
                >
                  <div
                    className="ReactVirtualized__Grid__innerScrollContainer"
                    role="rowgroup"
                    style={
                      Object {
                        "height": 150,
                        "maxHeight": 150,
                        "maxWidth": 25,
                        "overflow": "hidden",
                        "pointerEvents": "",
                        "position": "relative",
                        "width": 25,
                      }
                    }
                  >
                    <div
                      className="search-results cell observation-header"
                      key="0-0"
                      style={
                        Object {
                          "height": 30,
                          "left": 0,
                          "position": "absolute",
                          "top": 0,
                          "width": 25,
                        }
                      }
                    >
                      <span>
                        <styled.input
                          checked={false}
                          onChange={[Function]}
                        >
                          <StyledComponent
                            checked={false}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [
                                  Object {
                                    "className": "checkbox",
                                    "type": "checkbox",
                                  },
                                ],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": true,
                                  "lastClassName": "c3",
                                  "rules": Array [
                                    "
  && {
    width: 18px;
    height: 18px;
  }
",
                                  ],
                                },
                                "displayName": "styled.input",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "input",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onChange={[Function]}
                          >
                            <input
                              checked={false}
                              className="checkbox c3"
                              onChange={[Function]}
                              type="checkbox"
                            />
                          </StyledComponent>
                        </styled.input>
                      </span>
                    </div>
                    <div
                      className="search-results file-row-odd cell"
                      key="1-0"
                      style={
                        Object {
                          "height": 30,
                          "left": 0,
                          "position": "absolute",
                          "top": 30,
                          "width": 25,
                        }
                      }
                    >
                      <span>
                        <styled.input
                          checked={false}
                          data-test="observation-header-input"
                          onChange={[Function]}
                        >
                          <StyledComponent
                            checked={false}
                            data-test="observation-header-input"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [
                                  Object {
                                    "className": "checkbox",
                                    "type": "checkbox",
                                  },
                                ],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": true,
                                  "lastClassName": "c3",
                                  "rules": Array [
                                    "
  && {
    width: 18px;
    height: 18px;
  }
",
                                  ],
                                },
                                "displayName": "styled.input",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "input",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onChange={[Function]}
                          >
                            <input
                              checked={false}
                              className="checkbox c3"
                              data-test="observation-header-input"
                              onChange={[Function]}
                              type="checkbox"
                            />
                          </StyledComponent>
                        </styled.input>
                      </span>
                    </div>
                    <div
                      className="search-results cell observation-header"
                      key="2-0"
                      style={
                        Object {
                          "height": 30,
                          "left": 0,
                          "position": "absolute",
                          "top": 60,
                          "width": 25,
                        }
                      }
                    >
                      <span>
                        <styled.input
                          checked={false}
                          onChange={[Function]}
                        >
                          <StyledComponent
                            checked={false}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [
                                  Object {
                                    "className": "checkbox",
                                    "type": "checkbox",
                                  },
                                ],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": true,
                                  "lastClassName": "c3",
                                  "rules": Array [
                                    "
  && {
    width: 18px;
    height: 18px;
  }
",
                                  ],
                                },
                                "displayName": "styled.input",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "input",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onChange={[Function]}
                          >
                            <input
                              checked={false}
                              className="checkbox c3"
                              onChange={[Function]}
                              type="checkbox"
                            />
                          </StyledComponent>
                        </styled.input>
                      </span>
                    </div>
                    <div
                      className="search-results file-row-odd cell"
                      key="3-0"
                      style={
                        Object {
                          "height": 30,
                          "left": 0,
                          "position": "absolute",
                          "top": 90,
                          "width": 25,
                        }
                      }
                    >
                      <span>
                        <styled.input
                          checked={false}
                          data-test="observation-header-input"
                          onChange={[Function]}
                        >
                          <StyledComponent
                            checked={false}
                            data-test="observation-header-input"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [
                                  Object {
                                    "className": "checkbox",
                                    "type": "checkbox",
                                  },
                                ],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": true,
                                  "lastClassName": "c3",
                                  "rules": Array [
                                    "
  && {
    width: 18px;
    height: 18px;
  }
",
                                  ],
                                },
                                "displayName": "styled.input",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "input",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onChange={[Function]}
                          >
                            <input
                              checked={false}
                              className="checkbox c3"
                              data-test="observation-header-input"
                              onChange={[Function]}
                              type="checkbox"
                            />
                          </StyledComponent>
                        </styled.input>
                      </span>
                    </div>
                    <div
                      className="search-results file-row-even cell"
                      key="4-0"
                      style={
                        Object {
                          "height": 30,
                          "left": 0,
                          "position": "absolute",
                          "top": 120,
                          "width": 25,
                        }
                      }
                    >
                      <span>
                        <styled.input
                          checked={false}
                          data-test="observation-header-input"
                          onChange={[Function]}
                        >
                          <StyledComponent
                            checked={false}
                            data-test="observation-header-input"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [
                                  Object {
                                    "className": "checkbox",
                                    "type": "checkbox",
                                  },
                                ],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bdVaJa",
                                  "isStatic": true,
                                  "lastClassName": "c3",
                                  "rules": Array [
                                    "
  && {
    width: 18px;
    height: 18px;
  }
",
                                  ],
                                },
                                "displayName": "styled.input",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bdVaJa",
                                "target": "input",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onChange={[Function]}
                          >
                            <input
                              checked={false}
                              className="checkbox c3"
                              data-test="observation-header-input"
                              onChange={[Function]}
                              type="checkbox"
                            />
                          </StyledComponent>
                        </styled.input>
                      </span>
                    </div>
                  </div>
                </div>
              </Grid>
            </div>
          </StyledComponent>
        </styled.div>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": true,
                  "lastClassName": "c4",
                  "rules": Array [
                    "
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c4"
            >
              <AutoSizer
                disableHeight={true}
                disableWidth={false}
                onResize={[Function]}
                style={Object {}}
              >
                <div
                  style={
                    Object {
                      "overflow": "visible",
                      "width": 0,
                    }
                  }
                >
                  <div>
                    <div
                      style={
                        Object {
                          "height": 40,
                          "width": 0,
                        }
                      }
                    >
                      <Grid
                        aria-label="grid"
                        aria-readonly={true}
                        autoContainerWidth={false}
                        autoHeight={false}
                        autoWidth={false}
                        cellRangeRenderer={[Function]}
                        cellRenderer={[Function]}
                        columnCount={2}
                        columnWidth={[Function]}
                        containerRole="rowgroup"
                        containerStyle={Object {}}
                        estimatedColumnSize={100}
                        estimatedRowSize={30}
                        getScrollbarSize={[Function]}
                        height={190}
                        isScrollingOptOut={false}
                        noContentRenderer={[Function]}
                        onScroll={[Function]}
                        onScrollbarPresenceChange={[Function]}
                        onSectionRendered={[Function]}
                        overscanColumnCount={0}
                        overscanIndicesGetter={[Function]}
                        overscanRowCount={10}
                        role="grid"
                        rowCount={1}
                        rowHeight={40}
                        scrollLeft={0}
                        scrollToAlignment="auto"
                        scrollToColumn={-1}
                        scrollToRow={-1}
                        scrollingResetTimeInterval={150}
                        style={
                          Object {
                            "overflow": "hidden",
                            "width": "100%",
                          }
                        }
                        tabIndex={0}
                        width={0}
                      >
                        <div
                          aria-label="grid"
                          aria-readonly={true}
                          className="ReactVirtualized__Grid"
                          onScroll={[Function]}
                          role="grid"
                          style={
                            Object {
                              "WebkitOverflowScrolling": "touch",
                              "boxSizing": "border-box",
                              "direction": "ltr",
                              "height": 190,
                              "overflow": "hidden",
                              "overflowX": "auto",
                              "overflowY": "hidden",
                              "position": "relative",
                              "width": "100%",
                              "willChange": "transform",
                            }
                          }
                          tabIndex={0}
                        />
                      </Grid>
                    </div>
                    <div
                      style={
                        Object {
                          "height": 190,
                          "width": 0,
                        }
                      }
                    >
                      <Grid
                        aria-label="grid"
                        aria-readonly={true}
                        autoContainerWidth={false}
                        autoHeight={false}
                        autoWidth={false}
                        cellRangeRenderer={[Function]}
                        cellRenderer={[Function]}
                        columnCount={2}
                        columnWidth={[Function]}
                        containerRole="rowgroup"
                        containerStyle={Object {}}
                        estimatedColumnSize={100}
                        estimatedRowSize={30}
                        getScrollbarSize={[Function]}
                        height={190}
                        isScrollingOptOut={false}
                        noContentRenderer={[Function]}
                        onScroll={[Function]}
                        onScrollbarPresenceChange={[Function]}
                        onSectionRendered={[Function]}
                        overscanColumnCount={0}
                        overscanIndicesGetter={[Function]}
                        overscanRowCount={10}
                        role="grid"
                        rowCount={5}
                        rowHeight={30}
                        scrollToAlignment="auto"
                        scrollToColumn={-1}
                        scrollToRow={-1}
                        scrollingResetTimeInterval={150}
                        style={
                          Object {
                            "width": "100%",
                          }
                        }
                        tabIndex={0}
                        width={0}
                      >
                        <div
                          aria-label="grid"
                          aria-readonly={true}
                          className="ReactVirtualized__Grid"
                          onScroll={[Function]}
                          role="grid"
                          style={
                            Object {
                              "WebkitOverflowScrolling": "touch",
                              "boxSizing": "border-box",
                              "direction": "ltr",
                              "height": 190,
                              "overflowX": "auto",
                              "overflowY": "hidden",
                              "position": "relative",
                              "width": "100%",
                              "willChange": "transform",
                            }
                          }
                          tabIndex={0}
                        />
                      </Grid>
                    </div>
                  </div>
                </div>
              </AutoSizer>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>,
  .c3.c3 {
  width: 18px;
  height: 18px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c1 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 0px;
  z-index: 10;
}

.c2 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 40px;
  z-index: 10;
}

<StyledComponent
    data-test="search-results-table"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": true,
          "lastClassName": "c0",
          "rules": Array [
            "
  display: flex;
  flex-direction: row;
  position: relative;
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <div
      className="c0"
      data-test="search-results-table"
    >
      <styled.div
        top={0}
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bxivhb",
                "isStatic": false,
                "lastClassName": "c2",
                "rules": Array [
                  "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                  [Function],
                  "px;
  z-index: 10;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bxivhb",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          top={0}
        >
          <div
            className="c1"
          >
            <Grid
              aria-label="grid"
              aria-readonly={true}
              autoContainerWidth={false}
              autoHeight={false}
              autoWidth={false}
              cellRangeRenderer={[Function]}
              cellRenderer={[Function]}
              className="HeaderGrid"
              columnCount={1}
              columnWidth={25}
              containerRole="rowgroup"
              containerStyle={Object {}}
              estimatedColumnSize={100}
              estimatedRowSize={30}
              getScrollbarSize={[Function]}
              height={40}
              isScrollingOptOut={false}
              noContentRenderer={[Function]}
              onScroll={[Function]}
              onScrollbarPresenceChange={[Function]}
              onSectionRendered={[Function]}
              overscanColumnCount={0}
              overscanIndicesGetter={[Function]}
              overscanRowCount={10}
              role="grid"
              rowCount={1}
              rowHeight={40}
              scrollToAlignment="auto"
              scrollToColumn={-1}
              scrollToRow={-1}
              scrollingResetTimeInterval={150}
              style={Object {}}
              tabIndex={0}
              width={25}
            >
              <div
                aria-label="grid"
                aria-readonly={true}
                className="ReactVirtualized__Grid HeaderGrid"
                onScroll={[Function]}
                role="grid"
                style={
                  Object {
                    "WebkitOverflowScrolling": "touch",
                    "boxSizing": "border-box",
                    "direction": "ltr",
                    "height": 40,
                    "overflowX": "hidden",
                    "overflowY": "hidden",
                    "position": "relative",
                    "width": 25,
                    "willChange": "transform",
                  }
                }
                tabIndex={0}
              >
                <div
                  className="ReactVirtualized__Grid__innerScrollContainer"
                  role="rowgroup"
                  style={
                    Object {
                      "height": 40,
                      "maxHeight": 40,
                      "maxWidth": 25,
                      "overflow": "hidden",
                      "pointerEvents": "",
                      "position": "relative",
                      "width": 25,
                    }
                  }
                >
                  <div
                    className="search-results header cell cart"
                    key="0-0"
                    style={
                      Object {
                        "height": 40,
                        "left": 0,
                        "position": "absolute",
                        "top": 0,
                        "width": 25,
                      }
                    }
                  >
                    <span>
                      <FontAwesomeIcon
                        border={false}
                        className=""
                        fixedWidth={false}
                        flip={null}
                        icon={
                          Object {
                            "icon": Array [
                              576,
                              512,
                              Array [],
                              "f07a",
                              "M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z",
                            ],
                            "iconName": "shopping-cart",
                            "prefix": "fas",
                          }
                        }
                        inverse={false}
                        listItem={false}
                        mask={null}
                        pull={null}
                        pulse={false}
                        rotation={null}
                        size={null}
                        spin={false}
                        symbol={false}
                        title=""
                        transform={null}
                      >
                        <svg
                          aria-hidden="true"
                          className="svg-inline--fa fa-shopping-cart fa-w-18 "
                          data-icon="shopping-cart"
                          data-prefix="fas"
                          focusable="false"
                          role="img"
                          style={Object {}}
                          viewBox="0 0 576 512"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z"
                            fill="currentColor"
                            style={Object {}}
                          />
                        </svg>
                      </FontAwesomeIcon>
                    </span>
                  </div>
                </div>
              </div>
            </Grid>
          </div>
        </StyledComponent>
      </styled.div>
      <styled.div
        top={40}
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bxivhb",
                "isStatic": false,
                "lastClassName": "c2",
                "rules": Array [
                  "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                  [Function],
                  "px;
  z-index: 10;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bxivhb",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          top={40}
        >
          <div
            className="c2"
          >
            <Grid
              aria-label="grid"
              aria-readonly={true}
              autoContainerWidth={false}
              autoHeight={false}
              autoWidth={false}
              cellRangeRenderer={[Function]}
              cellRenderer={[Function]}
              columnCount={1}
              columnWidth={25}
              containerRole="rowgroup"
              containerStyle={Object {}}
              estimatedColumnSize={100}
              estimatedRowSize={30}
              getScrollbarSize={[Function]}
              height={190}
              isScrollingOptOut={false}
              noContentRenderer={[Function]}
              onScroll={[Function]}
              onScrollbarPresenceChange={[Function]}
              onSectionRendered={[Function]}
              overscanColumnCount={0}
              overscanIndicesGetter={[Function]}
              overscanRowCount={10}
              role="grid"
              rowCount={5}
              rowHeight={30}
              scrollToAlignment="auto"
              scrollToColumn={-1}
              scrollToRow={-1}
              scrollTop={0}
              scrollingResetTimeInterval={150}
              style={
                Object {
                  "overflow": "hidden",
                }
              }
              tabIndex={0}
              width={25}
            >
              <div
                aria-label="grid"
                aria-readonly={true}
                className="ReactVirtualized__Grid"
                onScroll={[Function]}
                role="grid"
                style={
                  Object {
                    "WebkitOverflowScrolling": "touch",
                    "boxSizing": "border-box",
                    "direction": "ltr",
                    "height": 190,
                    "overflow": "hidden",
                    "overflowX": "hidden",
                    "overflowY": "hidden",
                    "position": "relative",
                    "width": 25,
                    "willChange": "transform",
                  }
                }
                tabIndex={0}
              >
                <div
                  className="ReactVirtualized__Grid__innerScrollContainer"
                  role="rowgroup"
                  style={
                    Object {
                      "height": 150,
                      "maxHeight": 150,
                      "maxWidth": 25,
                      "overflow": "hidden",
                      "pointerEvents": "",
                      "position": "relative",
                      "width": 25,
                    }
                  }
                >
                  <div
                    className="search-results cell observation-header"
                    key="0-0"
                    style={
                      Object {
                        "height": 30,
                        "left": 0,
                        "position": "absolute",
                        "top": 0,
                        "width": 25,
                      }
                    }
                  >
                    <span>
                      <styled.input
                        checked={false}
                        onChange={[Function]}
                      >
                        <StyledComponent
                          checked={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {
                                  "className": "checkbox",
                                  "type": "checkbox",
                                },
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  && {
    width: 18px;
    height: 18px;
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onChange={[Function]}
                        >
                          <input
                            checked={false}
                            className="checkbox c3"
                            onChange={[Function]}
                            type="checkbox"
                          />
                        </StyledComponent>
                      </styled.input>
                    </span>
                  </div>
                  <div
                    className="search-results file-row-odd cell"
                    key="1-0"
                    style={
                      Object {
                        "height": 30,
                        "left": 0,
                        "position": "absolute",
                        "top": 30,
                        "width": 25,
                      }
                    }
                  >
                    <span>
                      <styled.input
                        checked={false}
                        data-test="observation-header-input"
                        onChange={[Function]}
                      >
                        <StyledComponent
                          checked={false}
                          data-test="observation-header-input"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {
                                  "className": "checkbox",
                                  "type": "checkbox",
                                },
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  && {
    width: 18px;
    height: 18px;
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onChange={[Function]}
                        >
                          <input
                            checked={false}
                            className="checkbox c3"
                            data-test="observation-header-input"
                            onChange={[Function]}
                            type="checkbox"
                          />
                        </StyledComponent>
                      </styled.input>
                    </span>
                  </div>
                  <div
                    className="search-results cell observation-header"
                    key="2-0"
                    style={
                      Object {
                        "height": 30,
                        "left": 0,
                        "position": "absolute",
                        "top": 60,
                        "width": 25,
                      }
                    }
                  >
                    <span>
                      <styled.input
                        checked={false}
                        onChange={[Function]}
                      >
                        <StyledComponent
                          checked={false}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {
                                  "className": "checkbox",
                                  "type": "checkbox",
                                },
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  && {
    width: 18px;
    height: 18px;
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onChange={[Function]}
                        >
                          <input
                            checked={false}
                            className="checkbox c3"
                            onChange={[Function]}
                            type="checkbox"
                          />
                        </StyledComponent>
                      </styled.input>
                    </span>
                  </div>
                  <div
                    className="search-results file-row-odd cell"
                    key="3-0"
                    style={
                      Object {
                        "height": 30,
                        "left": 0,
                        "position": "absolute",
                        "top": 90,
                        "width": 25,
                      }
                    }
                  >
                    <span>
                      <styled.input
                        checked={false}
                        data-test="observation-header-input"
                        onChange={[Function]}
                      >
                        <StyledComponent
                          checked={false}
                          data-test="observation-header-input"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {
                                  "className": "checkbox",
                                  "type": "checkbox",
                                },
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  && {
    width: 18px;
    height: 18px;
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onChange={[Function]}
                        >
                          <input
                            checked={false}
                            className="checkbox c3"
                            data-test="observation-header-input"
                            onChange={[Function]}
                            type="checkbox"
                          />
                        </StyledComponent>
                      </styled.input>
                    </span>
                  </div>
                  <div
                    className="search-results file-row-even cell"
                    key="4-0"
                    style={
                      Object {
                        "height": 30,
                        "left": 0,
                        "position": "absolute",
                        "top": 120,
                        "width": 25,
                      }
                    }
                  >
                    <span>
                      <styled.input
                        checked={false}
                        data-test="observation-header-input"
                        onChange={[Function]}
                      >
                        <StyledComponent
                          checked={false}
                          data-test="observation-header-input"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [
                                Object {
                                  "className": "checkbox",
                                  "type": "checkbox",
                                },
                              ],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bdVaJa",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "
  && {
    width: 18px;
    height: 18px;
  }
",
                                ],
                              },
                              "displayName": "styled.input",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bdVaJa",
                              "target": "input",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onChange={[Function]}
                        >
                          <input
                            checked={false}
                            className="checkbox c3"
                            data-test="observation-header-input"
                            onChange={[Function]}
                            type="checkbox"
                          />
                        </StyledComponent>
                      </styled.input>
                    </span>
                  </div>
                </div>
              </div>
            </Grid>
          </div>
        </StyledComponent>
      </styled.div>
      <styled.div>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-htpNat",
                "isStatic": true,
                "lastClassName": "c4",
                "rules": Array [
                  "
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-htpNat",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c4"
          >
            <AutoSizer
              disableHeight={true}
              disableWidth={false}
              onResize={[Function]}
              style={Object {}}
            >
              <div
                style={
                  Object {
                    "overflow": "visible",
                    "width": 0,
                  }
                }
              >
                <div>
                  <div
                    style={
                      Object {
                        "height": 40,
                        "width": 0,
                      }
                    }
                  >
                    <Grid
                      aria-label="grid"
                      aria-readonly={true}
                      autoContainerWidth={false}
                      autoHeight={false}
                      autoWidth={false}
                      cellRangeRenderer={[Function]}
                      cellRenderer={[Function]}
                      columnCount={2}
                      columnWidth={[Function]}
                      containerRole="rowgroup"
                      containerStyle={Object {}}
                      estimatedColumnSize={100}
                      estimatedRowSize={30}
                      getScrollbarSize={[Function]}
                      height={190}
                      isScrollingOptOut={false}
                      noContentRenderer={[Function]}
                      onScroll={[Function]}
                      onScrollbarPresenceChange={[Function]}
                      onSectionRendered={[Function]}
                      overscanColumnCount={0}
                      overscanIndicesGetter={[Function]}
                      overscanRowCount={10}
                      role="grid"
                      rowCount={1}
                      rowHeight={40}
                      scrollLeft={0}
                      scrollToAlignment="auto"
                      scrollToColumn={-1}
                      scrollToRow={-1}
                      scrollingResetTimeInterval={150}
                      style={
                        Object {
                          "overflow": "hidden",
                          "width": "100%",
                        }
                      }
                      tabIndex={0}
                      width={0}
                    >
                      <div
                        aria-label="grid"
                        aria-readonly={true}
                        className="ReactVirtualized__Grid"
                        onScroll={[Function]}
                        role="grid"
                        style={
                          Object {
                            "WebkitOverflowScrolling": "touch",
                            "boxSizing": "border-box",
                            "direction": "ltr",
                            "height": 190,
                            "overflow": "hidden",
                            "overflowX": "auto",
                            "overflowY": "hidden",
                            "position": "relative",
                            "width": "100%",
                            "willChange": "transform",
                          }
                        }
                        tabIndex={0}
                      />
                    </Grid>
                  </div>
                  <div
                    style={
                      Object {
                        "height": 190,
                        "width": 0,
                      }
                    }
                  >
                    <Grid
                      aria-label="grid"
                      aria-readonly={true}
                      autoContainerWidth={false}
                      autoHeight={false}
                      autoWidth={false}
                      cellRangeRenderer={[Function]}
                      cellRenderer={[Function]}
                      columnCount={2}
                      columnWidth={[Function]}
                      containerRole="rowgroup"
                      containerStyle={Object {}}
                      estimatedColumnSize={100}
                      estimatedRowSize={30}
                      getScrollbarSize={[Function]}
                      height={190}
                      isScrollingOptOut={false}
                      noContentRenderer={[Function]}
                      onScroll={[Function]}
                      onScrollbarPresenceChange={[Function]}
                      onSectionRendered={[Function]}
                      overscanColumnCount={0}
                      overscanIndicesGetter={[Function]}
                      overscanRowCount={10}
                      role="grid"
                      rowCount={5}
                      rowHeight={30}
                      scrollToAlignment="auto"
                      scrollToColumn={-1}
                      scrollToRow={-1}
                      scrollingResetTimeInterval={150}
                      style={
                        Object {
                          "width": "100%",
                        }
                      }
                      tabIndex={0}
                      width={0}
                    >
                      <div
                        aria-label="grid"
                        aria-readonly={true}
                        className="ReactVirtualized__Grid"
                        onScroll={[Function]}
                        role="grid"
                        style={
                          Object {
                            "WebkitOverflowScrolling": "touch",
                            "boxSizing": "border-box",
                            "direction": "ltr",
                            "height": 190,
                            "overflowX": "auto",
                            "overflowY": "hidden",
                            "position": "relative",
                            "width": "100%",
                            "willChange": "transform",
                          }
                        }
                        tabIndex={0}
                      />
                    </Grid>
                  </div>
                </div>
              </div>
            </AutoSizer>
          </div>
        </StyledComponent>
      </styled.div>
    </div>
  </StyledComponent>,
  .c3.c3 {
  width: 18px;
  height: 18px;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c1 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 0px;
  z-index: 10;
}

.c2 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 40px;
  z-index: 10;
}

<div
    className="c0"
    data-test="search-results-table"
  >
    <styled.div
      top={0}
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bxivhb",
              "isStatic": false,
              "lastClassName": "c2",
              "rules": Array [
                "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                [Function],
                "px;
  z-index: 10;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bxivhb",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        top={0}
      >
        <div
          className="c1"
        >
          <Grid
            aria-label="grid"
            aria-readonly={true}
            autoContainerWidth={false}
            autoHeight={false}
            autoWidth={false}
            cellRangeRenderer={[Function]}
            cellRenderer={[Function]}
            className="HeaderGrid"
            columnCount={1}
            columnWidth={25}
            containerRole="rowgroup"
            containerStyle={Object {}}
            estimatedColumnSize={100}
            estimatedRowSize={30}
            getScrollbarSize={[Function]}
            height={40}
            isScrollingOptOut={false}
            noContentRenderer={[Function]}
            onScroll={[Function]}
            onScrollbarPresenceChange={[Function]}
            onSectionRendered={[Function]}
            overscanColumnCount={0}
            overscanIndicesGetter={[Function]}
            overscanRowCount={10}
            role="grid"
            rowCount={1}
            rowHeight={40}
            scrollToAlignment="auto"
            scrollToColumn={-1}
            scrollToRow={-1}
            scrollingResetTimeInterval={150}
            style={Object {}}
            tabIndex={0}
            width={25}
          >
            <div
              aria-label="grid"
              aria-readonly={true}
              className="ReactVirtualized__Grid HeaderGrid"
              onScroll={[Function]}
              role="grid"
              style={
                Object {
                  "WebkitOverflowScrolling": "touch",
                  "boxSizing": "border-box",
                  "direction": "ltr",
                  "height": 40,
                  "overflowX": "hidden",
                  "overflowY": "hidden",
                  "position": "relative",
                  "width": 25,
                  "willChange": "transform",
                }
              }
              tabIndex={0}
            >
              <div
                className="ReactVirtualized__Grid__innerScrollContainer"
                role="rowgroup"
                style={
                  Object {
                    "height": 40,
                    "maxHeight": 40,
                    "maxWidth": 25,
                    "overflow": "hidden",
                    "pointerEvents": "",
                    "position": "relative",
                    "width": 25,
                  }
                }
              >
                <div
                  className="search-results header cell cart"
                  key="0-0"
                  style={
                    Object {
                      "height": 40,
                      "left": 0,
                      "position": "absolute",
                      "top": 0,
                      "width": 25,
                    }
                  }
                >
                  <span>
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      fixedWidth={false}
                      flip={null}
                      icon={
                        Object {
                          "icon": Array [
                            576,
                            512,
                            Array [],
                            "f07a",
                            "M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z",
                          ],
                          "iconName": "shopping-cart",
                          "prefix": "fas",
                        }
                      }
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size={null}
                      spin={false}
                      symbol={false}
                      title=""
                      transform={null}
                    >
                      <svg
                        aria-hidden="true"
                        className="svg-inline--fa fa-shopping-cart fa-w-18 "
                        data-icon="shopping-cart"
                        data-prefix="fas"
                        focusable="false"
                        role="img"
                        style={Object {}}
                        viewBox="0 0 576 512"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z"
                          fill="currentColor"
                          style={Object {}}
                        />
                      </svg>
                    </FontAwesomeIcon>
                  </span>
                </div>
              </div>
            </div>
          </Grid>
        </div>
      </StyledComponent>
    </styled.div>
    <styled.div
      top={40}
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bxivhb",
              "isStatic": false,
              "lastClassName": "c2",
              "rules": Array [
                "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                [Function],
                "px;
  z-index: 10;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bxivhb",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        top={40}
      >
        <div
          className="c2"
        >
          <Grid
            aria-label="grid"
            aria-readonly={true}
            autoContainerWidth={false}
            autoHeight={false}
            autoWidth={false}
            cellRangeRenderer={[Function]}
            cellRenderer={[Function]}
            columnCount={1}
            columnWidth={25}
            containerRole="rowgroup"
            containerStyle={Object {}}
            estimatedColumnSize={100}
            estimatedRowSize={30}
            getScrollbarSize={[Function]}
            height={190}
            isScrollingOptOut={false}
            noContentRenderer={[Function]}
            onScroll={[Function]}
            onScrollbarPresenceChange={[Function]}
            onSectionRendered={[Function]}
            overscanColumnCount={0}
            overscanIndicesGetter={[Function]}
            overscanRowCount={10}
            role="grid"
            rowCount={5}
            rowHeight={30}
            scrollToAlignment="auto"
            scrollToColumn={-1}
            scrollToRow={-1}
            scrollTop={0}
            scrollingResetTimeInterval={150}
            style={
              Object {
                "overflow": "hidden",
              }
            }
            tabIndex={0}
            width={25}
          >
            <div
              aria-label="grid"
              aria-readonly={true}
              className="ReactVirtualized__Grid"
              onScroll={[Function]}
              role="grid"
              style={
                Object {
                  "WebkitOverflowScrolling": "touch",
                  "boxSizing": "border-box",
                  "direction": "ltr",
                  "height": 190,
                  "overflow": "hidden",
                  "overflowX": "hidden",
                  "overflowY": "hidden",
                  "position": "relative",
                  "width": 25,
                  "willChange": "transform",
                }
              }
              tabIndex={0}
            >
              <div
                className="ReactVirtualized__Grid__innerScrollContainer"
                role="rowgroup"
                style={
                  Object {
                    "height": 150,
                    "maxHeight": 150,
                    "maxWidth": 25,
                    "overflow": "hidden",
                    "pointerEvents": "",
                    "position": "relative",
                    "width": 25,
                  }
                }
              >
                <div
                  className="search-results cell observation-header"
                  key="0-0"
                  style={
                    Object {
                      "height": 30,
                      "left": 0,
                      "position": "absolute",
                      "top": 0,
                      "width": 25,
                    }
                  }
                >
                  <span>
                    <styled.input
                      checked={false}
                      onChange={[Function]}
                    >
                      <StyledComponent
                        checked={false}
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {
                                "className": "checkbox",
                                "type": "checkbox",
                              },
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bdVaJa",
                              "isStatic": true,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
  && {
    width: 18px;
    height: 18px;
  }
",
                              ],
                            },
                            "displayName": "styled.input",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bdVaJa",
                            "target": "input",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onChange={[Function]}
                      >
                        <input
                          checked={false}
                          className="checkbox c3"
                          onChange={[Function]}
                          type="checkbox"
                        />
                      </StyledComponent>
                    </styled.input>
                  </span>
                </div>
                <div
                  className="search-results file-row-odd cell"
                  key="1-0"
                  style={
                    Object {
                      "height": 30,
                      "left": 0,
                      "position": "absolute",
                      "top": 30,
                      "width": 25,
                    }
                  }
                >
                  <span>
                    <styled.input
                      checked={false}
                      data-test="observation-header-input"
                      onChange={[Function]}
                    >
                      <StyledComponent
                        checked={false}
                        data-test="observation-header-input"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {
                                "className": "checkbox",
                                "type": "checkbox",
                              },
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bdVaJa",
                              "isStatic": true,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
  && {
    width: 18px;
    height: 18px;
  }
",
                              ],
                            },
                            "displayName": "styled.input",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bdVaJa",
                            "target": "input",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onChange={[Function]}
                      >
                        <input
                          checked={false}
                          className="checkbox c3"
                          data-test="observation-header-input"
                          onChange={[Function]}
                          type="checkbox"
                        />
                      </StyledComponent>
                    </styled.input>
                  </span>
                </div>
                <div
                  className="search-results cell observation-header"
                  key="2-0"
                  style={
                    Object {
                      "height": 30,
                      "left": 0,
                      "position": "absolute",
                      "top": 60,
                      "width": 25,
                    }
                  }
                >
                  <span>
                    <styled.input
                      checked={false}
                      onChange={[Function]}
                    >
                      <StyledComponent
                        checked={false}
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {
                                "className": "checkbox",
                                "type": "checkbox",
                              },
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bdVaJa",
                              "isStatic": true,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
  && {
    width: 18px;
    height: 18px;
  }
",
                              ],
                            },
                            "displayName": "styled.input",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bdVaJa",
                            "target": "input",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onChange={[Function]}
                      >
                        <input
                          checked={false}
                          className="checkbox c3"
                          onChange={[Function]}
                          type="checkbox"
                        />
                      </StyledComponent>
                    </styled.input>
                  </span>
                </div>
                <div
                  className="search-results file-row-odd cell"
                  key="3-0"
                  style={
                    Object {
                      "height": 30,
                      "left": 0,
                      "position": "absolute",
                      "top": 90,
                      "width": 25,
                    }
                  }
                >
                  <span>
                    <styled.input
                      checked={false}
                      data-test="observation-header-input"
                      onChange={[Function]}
                    >
                      <StyledComponent
                        checked={false}
                        data-test="observation-header-input"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {
                                "className": "checkbox",
                                "type": "checkbox",
                              },
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bdVaJa",
                              "isStatic": true,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
  && {
    width: 18px;
    height: 18px;
  }
",
                              ],
                            },
                            "displayName": "styled.input",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bdVaJa",
                            "target": "input",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onChange={[Function]}
                      >
                        <input
                          checked={false}
                          className="checkbox c3"
                          data-test="observation-header-input"
                          onChange={[Function]}
                          type="checkbox"
                        />
                      </StyledComponent>
                    </styled.input>
                  </span>
                </div>
                <div
                  className="search-results file-row-even cell"
                  key="4-0"
                  style={
                    Object {
                      "height": 30,
                      "left": 0,
                      "position": "absolute",
                      "top": 120,
                      "width": 25,
                    }
                  }
                >
                  <span>
                    <styled.input
                      checked={false}
                      data-test="observation-header-input"
                      onChange={[Function]}
                    >
                      <StyledComponent
                        checked={false}
                        data-test="observation-header-input"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              Object {
                                "className": "checkbox",
                                "type": "checkbox",
                              },
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bdVaJa",
                              "isStatic": true,
                              "lastClassName": "c3",
                              "rules": Array [
                                "
  && {
    width: 18px;
    height: 18px;
  }
",
                              ],
                            },
                            "displayName": "styled.input",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bdVaJa",
                            "target": "input",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onChange={[Function]}
                      >
                        <input
                          checked={false}
                          className="checkbox c3"
                          data-test="observation-header-input"
                          onChange={[Function]}
                          type="checkbox"
                        />
                      </StyledComponent>
                    </styled.input>
                  </span>
                </div>
              </div>
            </div>
          </Grid>
        </div>
      </StyledComponent>
    </styled.div>
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htpNat",
              "isStatic": true,
              "lastClassName": "c4",
              "rules": Array [
                "
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htpNat",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="c4"
        >
          <AutoSizer
            disableHeight={true}
            disableWidth={false}
            onResize={[Function]}
            style={Object {}}
          >
            <div
              style={
                Object {
                  "overflow": "visible",
                  "width": 0,
                }
              }
            >
              <div>
                <div
                  style={
                    Object {
                      "height": 40,
                      "width": 0,
                    }
                  }
                >
                  <Grid
                    aria-label="grid"
                    aria-readonly={true}
                    autoContainerWidth={false}
                    autoHeight={false}
                    autoWidth={false}
                    cellRangeRenderer={[Function]}
                    cellRenderer={[Function]}
                    columnCount={2}
                    columnWidth={[Function]}
                    containerRole="rowgroup"
                    containerStyle={Object {}}
                    estimatedColumnSize={100}
                    estimatedRowSize={30}
                    getScrollbarSize={[Function]}
                    height={190}
                    isScrollingOptOut={false}
                    noContentRenderer={[Function]}
                    onScroll={[Function]}
                    onScrollbarPresenceChange={[Function]}
                    onSectionRendered={[Function]}
                    overscanColumnCount={0}
                    overscanIndicesGetter={[Function]}
                    overscanRowCount={10}
                    role="grid"
                    rowCount={1}
                    rowHeight={40}
                    scrollLeft={0}
                    scrollToAlignment="auto"
                    scrollToColumn={-1}
                    scrollToRow={-1}
                    scrollingResetTimeInterval={150}
                    style={
                      Object {
                        "overflow": "hidden",
                        "width": "100%",
                      }
                    }
                    tabIndex={0}
                    width={0}
                  >
                    <div
                      aria-label="grid"
                      aria-readonly={true}
                      className="ReactVirtualized__Grid"
                      onScroll={[Function]}
                      role="grid"
                      style={
                        Object {
                          "WebkitOverflowScrolling": "touch",
                          "boxSizing": "border-box",
                          "direction": "ltr",
                          "height": 190,
                          "overflow": "hidden",
                          "overflowX": "auto",
                          "overflowY": "hidden",
                          "position": "relative",
                          "width": "100%",
                          "willChange": "transform",
                        }
                      }
                      tabIndex={0}
                    />
                  </Grid>
                </div>
                <div
                  style={
                    Object {
                      "height": 190,
                      "width": 0,
                    }
                  }
                >
                  <Grid
                    aria-label="grid"
                    aria-readonly={true}
                    autoContainerWidth={false}
                    autoHeight={false}
                    autoWidth={false}
                    cellRangeRenderer={[Function]}
                    cellRenderer={[Function]}
                    columnCount={2}
                    columnWidth={[Function]}
                    containerRole="rowgroup"
                    containerStyle={Object {}}
                    estimatedColumnSize={100}
                    estimatedRowSize={30}
                    getScrollbarSize={[Function]}
                    height={190}
                    isScrollingOptOut={false}
                    noContentRenderer={[Function]}
                    onScroll={[Function]}
                    onScrollbarPresenceChange={[Function]}
                    onSectionRendered={[Function]}
                    overscanColumnCount={0}
                    overscanIndicesGetter={[Function]}
                    overscanRowCount={10}
                    role="grid"
                    rowCount={5}
                    rowHeight={30}
                    scrollToAlignment="auto"
                    scrollToColumn={-1}
                    scrollToRow={-1}
                    scrollingResetTimeInterval={150}
                    style={
                      Object {
                        "width": "100%",
                      }
                    }
                    tabIndex={0}
                    width={0}
                  >
                    <div
                      aria-label="grid"
                      aria-readonly={true}
                      className="ReactVirtualized__Grid"
                      onScroll={[Function]}
                      role="grid"
                      style={
                        Object {
                          "WebkitOverflowScrolling": "touch",
                          "boxSizing": "border-box",
                          "direction": "ltr",
                          "height": 190,
                          "overflowX": "auto",
                          "overflowY": "hidden",
                          "position": "relative",
                          "width": "100%",
                          "willChange": "transform",
                        }
                      }
                      tabIndex={0}
                    />
                  </Grid>
                </div>
              </div>
            </div>
          </AutoSizer>
        </div>
      </StyledComponent>
    </styled.div>
  </div>,
]
`;

exports[`SearchResultsTable should render correctly with no search results 1`] = `
Array [
  .c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c1 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 0px;
  z-index: 10;
}

.c2 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 40px;
  z-index: 10;
}

<styled.div
    data-test="search-results-table"
  >
    <StyledComponent
      data-test="search-results-table"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  flex-direction: row;
  position: relative;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
        data-test="search-results-table"
      >
        <styled.div
          top={0}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                    [Function],
                    "px;
  z-index: 10;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            top={0}
          >
            <div
              className="c1"
            >
              <Grid
                aria-label="grid"
                aria-readonly={true}
                autoContainerWidth={false}
                autoHeight={false}
                autoWidth={false}
                cellRangeRenderer={[Function]}
                cellRenderer={[Function]}
                className="HeaderGrid"
                columnCount={1}
                columnWidth={25}
                containerRole="rowgroup"
                containerStyle={Object {}}
                estimatedColumnSize={100}
                estimatedRowSize={30}
                getScrollbarSize={[Function]}
                height={40}
                isScrollingOptOut={false}
                noContentRenderer={[Function]}
                onScroll={[Function]}
                onScrollbarPresenceChange={[Function]}
                onSectionRendered={[Function]}
                overscanColumnCount={0}
                overscanIndicesGetter={[Function]}
                overscanRowCount={10}
                role="grid"
                rowCount={1}
                rowHeight={40}
                scrollToAlignment="auto"
                scrollToColumn={-1}
                scrollToRow={-1}
                scrollingResetTimeInterval={150}
                style={Object {}}
                tabIndex={0}
                width={25}
              >
                <div
                  aria-label="grid"
                  aria-readonly={true}
                  className="ReactVirtualized__Grid HeaderGrid"
                  onScroll={[Function]}
                  role="grid"
                  style={
                    Object {
                      "WebkitOverflowScrolling": "touch",
                      "boxSizing": "border-box",
                      "direction": "ltr",
                      "height": 40,
                      "overflowX": "hidden",
                      "overflowY": "hidden",
                      "position": "relative",
                      "width": 25,
                      "willChange": "transform",
                    }
                  }
                  tabIndex={0}
                >
                  <div
                    className="ReactVirtualized__Grid__innerScrollContainer"
                    role="rowgroup"
                    style={
                      Object {
                        "height": 40,
                        "maxHeight": 40,
                        "maxWidth": 25,
                        "overflow": "hidden",
                        "pointerEvents": "",
                        "position": "relative",
                        "width": 25,
                      }
                    }
                  >
                    <div
                      className="search-results header cell cart"
                      key="0-0"
                      style={
                        Object {
                          "height": 40,
                          "left": 0,
                          "position": "absolute",
                          "top": 0,
                          "width": 25,
                        }
                      }
                    >
                      <span>
                        <FontAwesomeIcon
                          border={false}
                          className=""
                          fixedWidth={false}
                          flip={null}
                          icon={
                            Object {
                              "icon": Array [
                                576,
                                512,
                                Array [],
                                "f07a",
                                "M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z",
                              ],
                              "iconName": "shopping-cart",
                              "prefix": "fas",
                            }
                          }
                          inverse={false}
                          listItem={false}
                          mask={null}
                          pull={null}
                          pulse={false}
                          rotation={null}
                          size={null}
                          spin={false}
                          symbol={false}
                          title=""
                          transform={null}
                        >
                          <svg
                            aria-hidden="true"
                            className="svg-inline--fa fa-shopping-cart fa-w-18 "
                            data-icon="shopping-cart"
                            data-prefix="fas"
                            focusable="false"
                            role="img"
                            style={Object {}}
                            viewBox="0 0 576 512"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              d="M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z"
                              fill="currentColor"
                              style={Object {}}
                            />
                          </svg>
                        </FontAwesomeIcon>
                      </span>
                    </div>
                  </div>
                </div>
              </Grid>
            </div>
          </StyledComponent>
        </styled.div>
        <styled.div
          top={40}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                    [Function],
                    "px;
  z-index: 10;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            top={40}
          >
            <div
              className="c2"
            >
              <Grid
                aria-label="grid"
                aria-readonly={true}
                autoContainerWidth={false}
                autoHeight={false}
                autoWidth={false}
                cellRangeRenderer={[Function]}
                cellRenderer={[Function]}
                columnCount={1}
                columnWidth={25}
                containerRole="rowgroup"
                containerStyle={Object {}}
                estimatedColumnSize={100}
                estimatedRowSize={30}
                getScrollbarSize={[Function]}
                height={40}
                isScrollingOptOut={false}
                noContentRenderer={[Function]}
                onScroll={[Function]}
                onScrollbarPresenceChange={[Function]}
                onSectionRendered={[Function]}
                overscanColumnCount={0}
                overscanIndicesGetter={[Function]}
                overscanRowCount={10}
                role="grid"
                rowCount={0}
                rowHeight={30}
                scrollToAlignment="auto"
                scrollToColumn={-1}
                scrollToRow={-1}
                scrollTop={0}
                scrollingResetTimeInterval={150}
                style={
                  Object {
                    "overflow": "hidden",
                  }
                }
                tabIndex={0}
                width={25}
              >
                <div
                  aria-label="grid"
                  aria-readonly={true}
                  className="ReactVirtualized__Grid"
                  onScroll={[Function]}
                  role="grid"
                  style={
                    Object {
                      "WebkitOverflowScrolling": "touch",
                      "boxSizing": "border-box",
                      "direction": "ltr",
                      "height": 40,
                      "overflow": "hidden",
                      "overflowX": "hidden",
                      "overflowY": "hidden",
                      "position": "relative",
                      "width": 25,
                      "willChange": "transform",
                    }
                  }
                  tabIndex={0}
                />
              </Grid>
            </div>
          </StyledComponent>
        </styled.div>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": true,
                  "lastClassName": "c3",
                  "rules": Array [
                    "
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c3"
            >
              <AutoSizer
                disableHeight={true}
                disableWidth={false}
                onResize={[Function]}
                style={Object {}}
              >
                <div
                  style={
                    Object {
                      "overflow": "visible",
                      "width": 0,
                    }
                  }
                >
                  <div>
                    <div
                      style={
                        Object {
                          "height": 40,
                          "width": 0,
                        }
                      }
                    >
                      <Grid
                        aria-label="grid"
                        aria-readonly={true}
                        autoContainerWidth={false}
                        autoHeight={false}
                        autoWidth={false}
                        cellRangeRenderer={[Function]}
                        cellRenderer={[Function]}
                        columnCount={2}
                        columnWidth={[Function]}
                        containerRole="rowgroup"
                        containerStyle={Object {}}
                        estimatedColumnSize={100}
                        estimatedRowSize={30}
                        getScrollbarSize={[Function]}
                        height={40}
                        isScrollingOptOut={false}
                        noContentRenderer={[Function]}
                        onScroll={[Function]}
                        onScrollbarPresenceChange={[Function]}
                        onSectionRendered={[Function]}
                        overscanColumnCount={0}
                        overscanIndicesGetter={[Function]}
                        overscanRowCount={10}
                        role="grid"
                        rowCount={1}
                        rowHeight={40}
                        scrollLeft={0}
                        scrollToAlignment="auto"
                        scrollToColumn={-1}
                        scrollToRow={-1}
                        scrollingResetTimeInterval={150}
                        style={
                          Object {
                            "overflow": "hidden",
                            "width": "100%",
                          }
                        }
                        tabIndex={0}
                        width={0}
                      >
                        <div
                          aria-label="grid"
                          aria-readonly={true}
                          className="ReactVirtualized__Grid"
                          onScroll={[Function]}
                          role="grid"
                          style={
                            Object {
                              "WebkitOverflowScrolling": "touch",
                              "boxSizing": "border-box",
                              "direction": "ltr",
                              "height": 40,
                              "overflow": "hidden",
                              "overflowX": "auto",
                              "overflowY": "hidden",
                              "position": "relative",
                              "width": "100%",
                              "willChange": "transform",
                            }
                          }
                          tabIndex={0}
                        />
                      </Grid>
                    </div>
                    <div
                      style={
                        Object {
                          "height": 40,
                          "width": 0,
                        }
                      }
                    >
                      <Grid
                        aria-label="grid"
                        aria-readonly={true}
                        autoContainerWidth={false}
                        autoHeight={false}
                        autoWidth={false}
                        cellRangeRenderer={[Function]}
                        cellRenderer={[Function]}
                        columnCount={2}
                        columnWidth={[Function]}
                        containerRole="rowgroup"
                        containerStyle={Object {}}
                        estimatedColumnSize={100}
                        estimatedRowSize={30}
                        getScrollbarSize={[Function]}
                        height={40}
                        isScrollingOptOut={false}
                        noContentRenderer={[Function]}
                        onScroll={[Function]}
                        onScrollbarPresenceChange={[Function]}
                        onSectionRendered={[Function]}
                        overscanColumnCount={0}
                        overscanIndicesGetter={[Function]}
                        overscanRowCount={10}
                        role="grid"
                        rowCount={0}
                        rowHeight={30}
                        scrollToAlignment="auto"
                        scrollToColumn={-1}
                        scrollToRow={-1}
                        scrollingResetTimeInterval={150}
                        style={
                          Object {
                            "width": "100%",
                          }
                        }
                        tabIndex={0}
                        width={0}
                      >
                        <div
                          aria-label="grid"
                          aria-readonly={true}
                          className="ReactVirtualized__Grid"
                          onScroll={[Function]}
                          role="grid"
                          style={
                            Object {
                              "WebkitOverflowScrolling": "touch",
                              "boxSizing": "border-box",
                              "direction": "ltr",
                              "height": 40,
                              "overflowX": "auto",
                              "overflowY": "hidden",
                              "position": "relative",
                              "width": "100%",
                              "willChange": "transform",
                            }
                          }
                          tabIndex={0}
                        />
                      </Grid>
                    </div>
                  </div>
                </div>
              </AutoSizer>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>,
  .c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c1 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 0px;
  z-index: 10;
}

.c2 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 40px;
  z-index: 10;
}

<StyledComponent
    data-test="search-results-table"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": true,
          "lastClassName": "c0",
          "rules": Array [
            "
  display: flex;
  flex-direction: row;
  position: relative;
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <div
      className="c0"
      data-test="search-results-table"
    >
      <styled.div
        top={0}
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bxivhb",
                "isStatic": false,
                "lastClassName": "c2",
                "rules": Array [
                  "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                  [Function],
                  "px;
  z-index: 10;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bxivhb",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          top={0}
        >
          <div
            className="c1"
          >
            <Grid
              aria-label="grid"
              aria-readonly={true}
              autoContainerWidth={false}
              autoHeight={false}
              autoWidth={false}
              cellRangeRenderer={[Function]}
              cellRenderer={[Function]}
              className="HeaderGrid"
              columnCount={1}
              columnWidth={25}
              containerRole="rowgroup"
              containerStyle={Object {}}
              estimatedColumnSize={100}
              estimatedRowSize={30}
              getScrollbarSize={[Function]}
              height={40}
              isScrollingOptOut={false}
              noContentRenderer={[Function]}
              onScroll={[Function]}
              onScrollbarPresenceChange={[Function]}
              onSectionRendered={[Function]}
              overscanColumnCount={0}
              overscanIndicesGetter={[Function]}
              overscanRowCount={10}
              role="grid"
              rowCount={1}
              rowHeight={40}
              scrollToAlignment="auto"
              scrollToColumn={-1}
              scrollToRow={-1}
              scrollingResetTimeInterval={150}
              style={Object {}}
              tabIndex={0}
              width={25}
            >
              <div
                aria-label="grid"
                aria-readonly={true}
                className="ReactVirtualized__Grid HeaderGrid"
                onScroll={[Function]}
                role="grid"
                style={
                  Object {
                    "WebkitOverflowScrolling": "touch",
                    "boxSizing": "border-box",
                    "direction": "ltr",
                    "height": 40,
                    "overflowX": "hidden",
                    "overflowY": "hidden",
                    "position": "relative",
                    "width": 25,
                    "willChange": "transform",
                  }
                }
                tabIndex={0}
              >
                <div
                  className="ReactVirtualized__Grid__innerScrollContainer"
                  role="rowgroup"
                  style={
                    Object {
                      "height": 40,
                      "maxHeight": 40,
                      "maxWidth": 25,
                      "overflow": "hidden",
                      "pointerEvents": "",
                      "position": "relative",
                      "width": 25,
                    }
                  }
                >
                  <div
                    className="search-results header cell cart"
                    key="0-0"
                    style={
                      Object {
                        "height": 40,
                        "left": 0,
                        "position": "absolute",
                        "top": 0,
                        "width": 25,
                      }
                    }
                  >
                    <span>
                      <FontAwesomeIcon
                        border={false}
                        className=""
                        fixedWidth={false}
                        flip={null}
                        icon={
                          Object {
                            "icon": Array [
                              576,
                              512,
                              Array [],
                              "f07a",
                              "M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z",
                            ],
                            "iconName": "shopping-cart",
                            "prefix": "fas",
                          }
                        }
                        inverse={false}
                        listItem={false}
                        mask={null}
                        pull={null}
                        pulse={false}
                        rotation={null}
                        size={null}
                        spin={false}
                        symbol={false}
                        title=""
                        transform={null}
                      >
                        <svg
                          aria-hidden="true"
                          className="svg-inline--fa fa-shopping-cart fa-w-18 "
                          data-icon="shopping-cart"
                          data-prefix="fas"
                          focusable="false"
                          role="img"
                          style={Object {}}
                          viewBox="0 0 576 512"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z"
                            fill="currentColor"
                            style={Object {}}
                          />
                        </svg>
                      </FontAwesomeIcon>
                    </span>
                  </div>
                </div>
              </div>
            </Grid>
          </div>
        </StyledComponent>
      </styled.div>
      <styled.div
        top={40}
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bxivhb",
                "isStatic": false,
                "lastClassName": "c2",
                "rules": Array [
                  "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                  [Function],
                  "px;
  z-index: 10;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bxivhb",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          top={40}
        >
          <div
            className="c2"
          >
            <Grid
              aria-label="grid"
              aria-readonly={true}
              autoContainerWidth={false}
              autoHeight={false}
              autoWidth={false}
              cellRangeRenderer={[Function]}
              cellRenderer={[Function]}
              columnCount={1}
              columnWidth={25}
              containerRole="rowgroup"
              containerStyle={Object {}}
              estimatedColumnSize={100}
              estimatedRowSize={30}
              getScrollbarSize={[Function]}
              height={40}
              isScrollingOptOut={false}
              noContentRenderer={[Function]}
              onScroll={[Function]}
              onScrollbarPresenceChange={[Function]}
              onSectionRendered={[Function]}
              overscanColumnCount={0}
              overscanIndicesGetter={[Function]}
              overscanRowCount={10}
              role="grid"
              rowCount={0}
              rowHeight={30}
              scrollToAlignment="auto"
              scrollToColumn={-1}
              scrollToRow={-1}
              scrollTop={0}
              scrollingResetTimeInterval={150}
              style={
                Object {
                  "overflow": "hidden",
                }
              }
              tabIndex={0}
              width={25}
            >
              <div
                aria-label="grid"
                aria-readonly={true}
                className="ReactVirtualized__Grid"
                onScroll={[Function]}
                role="grid"
                style={
                  Object {
                    "WebkitOverflowScrolling": "touch",
                    "boxSizing": "border-box",
                    "direction": "ltr",
                    "height": 40,
                    "overflow": "hidden",
                    "overflowX": "hidden",
                    "overflowY": "hidden",
                    "position": "relative",
                    "width": 25,
                    "willChange": "transform",
                  }
                }
                tabIndex={0}
              />
            </Grid>
          </div>
        </StyledComponent>
      </styled.div>
      <styled.div>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-htpNat",
                "isStatic": true,
                "lastClassName": "c3",
                "rules": Array [
                  "
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-htpNat",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c3"
          >
            <AutoSizer
              disableHeight={true}
              disableWidth={false}
              onResize={[Function]}
              style={Object {}}
            >
              <div
                style={
                  Object {
                    "overflow": "visible",
                    "width": 0,
                  }
                }
              >
                <div>
                  <div
                    style={
                      Object {
                        "height": 40,
                        "width": 0,
                      }
                    }
                  >
                    <Grid
                      aria-label="grid"
                      aria-readonly={true}
                      autoContainerWidth={false}
                      autoHeight={false}
                      autoWidth={false}
                      cellRangeRenderer={[Function]}
                      cellRenderer={[Function]}
                      columnCount={2}
                      columnWidth={[Function]}
                      containerRole="rowgroup"
                      containerStyle={Object {}}
                      estimatedColumnSize={100}
                      estimatedRowSize={30}
                      getScrollbarSize={[Function]}
                      height={40}
                      isScrollingOptOut={false}
                      noContentRenderer={[Function]}
                      onScroll={[Function]}
                      onScrollbarPresenceChange={[Function]}
                      onSectionRendered={[Function]}
                      overscanColumnCount={0}
                      overscanIndicesGetter={[Function]}
                      overscanRowCount={10}
                      role="grid"
                      rowCount={1}
                      rowHeight={40}
                      scrollLeft={0}
                      scrollToAlignment="auto"
                      scrollToColumn={-1}
                      scrollToRow={-1}
                      scrollingResetTimeInterval={150}
                      style={
                        Object {
                          "overflow": "hidden",
                          "width": "100%",
                        }
                      }
                      tabIndex={0}
                      width={0}
                    >
                      <div
                        aria-label="grid"
                        aria-readonly={true}
                        className="ReactVirtualized__Grid"
                        onScroll={[Function]}
                        role="grid"
                        style={
                          Object {
                            "WebkitOverflowScrolling": "touch",
                            "boxSizing": "border-box",
                            "direction": "ltr",
                            "height": 40,
                            "overflow": "hidden",
                            "overflowX": "auto",
                            "overflowY": "hidden",
                            "position": "relative",
                            "width": "100%",
                            "willChange": "transform",
                          }
                        }
                        tabIndex={0}
                      />
                    </Grid>
                  </div>
                  <div
                    style={
                      Object {
                        "height": 40,
                        "width": 0,
                      }
                    }
                  >
                    <Grid
                      aria-label="grid"
                      aria-readonly={true}
                      autoContainerWidth={false}
                      autoHeight={false}
                      autoWidth={false}
                      cellRangeRenderer={[Function]}
                      cellRenderer={[Function]}
                      columnCount={2}
                      columnWidth={[Function]}
                      containerRole="rowgroup"
                      containerStyle={Object {}}
                      estimatedColumnSize={100}
                      estimatedRowSize={30}
                      getScrollbarSize={[Function]}
                      height={40}
                      isScrollingOptOut={false}
                      noContentRenderer={[Function]}
                      onScroll={[Function]}
                      onScrollbarPresenceChange={[Function]}
                      onSectionRendered={[Function]}
                      overscanColumnCount={0}
                      overscanIndicesGetter={[Function]}
                      overscanRowCount={10}
                      role="grid"
                      rowCount={0}
                      rowHeight={30}
                      scrollToAlignment="auto"
                      scrollToColumn={-1}
                      scrollToRow={-1}
                      scrollingResetTimeInterval={150}
                      style={
                        Object {
                          "width": "100%",
                        }
                      }
                      tabIndex={0}
                      width={0}
                    >
                      <div
                        aria-label="grid"
                        aria-readonly={true}
                        className="ReactVirtualized__Grid"
                        onScroll={[Function]}
                        role="grid"
                        style={
                          Object {
                            "WebkitOverflowScrolling": "touch",
                            "boxSizing": "border-box",
                            "direction": "ltr",
                            "height": 40,
                            "overflowX": "auto",
                            "overflowY": "hidden",
                            "position": "relative",
                            "width": "100%",
                            "willChange": "transform",
                          }
                        }
                        tabIndex={0}
                      />
                    </Grid>
                  </div>
                </div>
              </div>
            </AutoSizer>
          </div>
        </StyledComponent>
      </styled.div>
    </div>
  </StyledComponent>,
  .c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c1 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 0px;
  z-index: 10;
}

.c2 {
  -webkit-flex: 0 0 25px;
  -ms-flex: 0 0 25px;
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: 40px;
  z-index: 10;
}

<div
    className="c0"
    data-test="search-results-table"
  >
    <styled.div
      top={0}
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bxivhb",
              "isStatic": false,
              "lastClassName": "c2",
              "rules": Array [
                "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                [Function],
                "px;
  z-index: 10;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bxivhb",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        top={0}
      >
        <div
          className="c1"
        >
          <Grid
            aria-label="grid"
            aria-readonly={true}
            autoContainerWidth={false}
            autoHeight={false}
            autoWidth={false}
            cellRangeRenderer={[Function]}
            cellRenderer={[Function]}
            className="HeaderGrid"
            columnCount={1}
            columnWidth={25}
            containerRole="rowgroup"
            containerStyle={Object {}}
            estimatedColumnSize={100}
            estimatedRowSize={30}
            getScrollbarSize={[Function]}
            height={40}
            isScrollingOptOut={false}
            noContentRenderer={[Function]}
            onScroll={[Function]}
            onScrollbarPresenceChange={[Function]}
            onSectionRendered={[Function]}
            overscanColumnCount={0}
            overscanIndicesGetter={[Function]}
            overscanRowCount={10}
            role="grid"
            rowCount={1}
            rowHeight={40}
            scrollToAlignment="auto"
            scrollToColumn={-1}
            scrollToRow={-1}
            scrollingResetTimeInterval={150}
            style={Object {}}
            tabIndex={0}
            width={25}
          >
            <div
              aria-label="grid"
              aria-readonly={true}
              className="ReactVirtualized__Grid HeaderGrid"
              onScroll={[Function]}
              role="grid"
              style={
                Object {
                  "WebkitOverflowScrolling": "touch",
                  "boxSizing": "border-box",
                  "direction": "ltr",
                  "height": 40,
                  "overflowX": "hidden",
                  "overflowY": "hidden",
                  "position": "relative",
                  "width": 25,
                  "willChange": "transform",
                }
              }
              tabIndex={0}
            >
              <div
                className="ReactVirtualized__Grid__innerScrollContainer"
                role="rowgroup"
                style={
                  Object {
                    "height": 40,
                    "maxHeight": 40,
                    "maxWidth": 25,
                    "overflow": "hidden",
                    "pointerEvents": "",
                    "position": "relative",
                    "width": 25,
                  }
                }
              >
                <div
                  className="search-results header cell cart"
                  key="0-0"
                  style={
                    Object {
                      "height": 40,
                      "left": 0,
                      "position": "absolute",
                      "top": 0,
                      "width": 25,
                    }
                  }
                >
                  <span>
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      fixedWidth={false}
                      flip={null}
                      icon={
                        Object {
                          "icon": Array [
                            576,
                            512,
                            Array [],
                            "f07a",
                            "M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z",
                          ],
                          "iconName": "shopping-cart",
                          "prefix": "fas",
                        }
                      }
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size={null}
                      spin={false}
                      symbol={false}
                      title=""
                      transform={null}
                    >
                      <svg
                        aria-hidden="true"
                        className="svg-inline--fa fa-shopping-cart fa-w-18 "
                        data-icon="shopping-cart"
                        data-prefix="fas"
                        focusable="false"
                        role="img"
                        style={Object {}}
                        viewBox="0 0 576 512"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z"
                          fill="currentColor"
                          style={Object {}}
                        />
                      </svg>
                    </FontAwesomeIcon>
                  </span>
                </div>
              </div>
            </div>
          </Grid>
        </div>
      </StyledComponent>
    </styled.div>
    <styled.div
      top={40}
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bxivhb",
              "isStatic": false,
              "lastClassName": "c2",
              "rules": Array [
                "
  flex: 0 0 25px;
  position: absolute;
  left: 0;
  top: ",
                [Function],
                "px;
  z-index: 10;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bxivhb",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        top={40}
      >
        <div
          className="c2"
        >
          <Grid
            aria-label="grid"
            aria-readonly={true}
            autoContainerWidth={false}
            autoHeight={false}
            autoWidth={false}
            cellRangeRenderer={[Function]}
            cellRenderer={[Function]}
            columnCount={1}
            columnWidth={25}
            containerRole="rowgroup"
            containerStyle={Object {}}
            estimatedColumnSize={100}
            estimatedRowSize={30}
            getScrollbarSize={[Function]}
            height={40}
            isScrollingOptOut={false}
            noContentRenderer={[Function]}
            onScroll={[Function]}
            onScrollbarPresenceChange={[Function]}
            onSectionRendered={[Function]}
            overscanColumnCount={0}
            overscanIndicesGetter={[Function]}
            overscanRowCount={10}
            role="grid"
            rowCount={0}
            rowHeight={30}
            scrollToAlignment="auto"
            scrollToColumn={-1}
            scrollToRow={-1}
            scrollTop={0}
            scrollingResetTimeInterval={150}
            style={
              Object {
                "overflow": "hidden",
              }
            }
            tabIndex={0}
            width={25}
          >
            <div
              aria-label="grid"
              aria-readonly={true}
              className="ReactVirtualized__Grid"
              onScroll={[Function]}
              role="grid"
              style={
                Object {
                  "WebkitOverflowScrolling": "touch",
                  "boxSizing": "border-box",
                  "direction": "ltr",
                  "height": 40,
                  "overflow": "hidden",
                  "overflowX": "hidden",
                  "overflowY": "hidden",
                  "position": "relative",
                  "width": 25,
                  "willChange": "transform",
                }
              }
              tabIndex={0}
            />
          </Grid>
        </div>
      </StyledComponent>
    </styled.div>
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htpNat",
              "isStatic": true,
              "lastClassName": "c3",
              "rules": Array [
                "
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htpNat",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="c3"
        >
          <AutoSizer
            disableHeight={true}
            disableWidth={false}
            onResize={[Function]}
            style={Object {}}
          >
            <div
              style={
                Object {
                  "overflow": "visible",
                  "width": 0,
                }
              }
            >
              <div>
                <div
                  style={
                    Object {
                      "height": 40,
                      "width": 0,
                    }
                  }
                >
                  <Grid
                    aria-label="grid"
                    aria-readonly={true}
                    autoContainerWidth={false}
                    autoHeight={false}
                    autoWidth={false}
                    cellRangeRenderer={[Function]}
                    cellRenderer={[Function]}
                    columnCount={2}
                    columnWidth={[Function]}
                    containerRole="rowgroup"
                    containerStyle={Object {}}
                    estimatedColumnSize={100}
                    estimatedRowSize={30}
                    getScrollbarSize={[Function]}
                    height={40}
                    isScrollingOptOut={false}
                    noContentRenderer={[Function]}
                    onScroll={[Function]}
                    onScrollbarPresenceChange={[Function]}
                    onSectionRendered={[Function]}
                    overscanColumnCount={0}
                    overscanIndicesGetter={[Function]}
                    overscanRowCount={10}
                    role="grid"
                    rowCount={1}
                    rowHeight={40}
                    scrollLeft={0}
                    scrollToAlignment="auto"
                    scrollToColumn={-1}
                    scrollToRow={-1}
                    scrollingResetTimeInterval={150}
                    style={
                      Object {
                        "overflow": "hidden",
                        "width": "100%",
                      }
                    }
                    tabIndex={0}
                    width={0}
                  >
                    <div
                      aria-label="grid"
                      aria-readonly={true}
                      className="ReactVirtualized__Grid"
                      onScroll={[Function]}
                      role="grid"
                      style={
                        Object {
                          "WebkitOverflowScrolling": "touch",
                          "boxSizing": "border-box",
                          "direction": "ltr",
                          "height": 40,
                          "overflow": "hidden",
                          "overflowX": "auto",
                          "overflowY": "hidden",
                          "position": "relative",
                          "width": "100%",
                          "willChange": "transform",
                        }
                      }
                      tabIndex={0}
                    />
                  </Grid>
                </div>
                <div
                  style={
                    Object {
                      "height": 40,
                      "width": 0,
                    }
                  }
                >
                  <Grid
                    aria-label="grid"
                    aria-readonly={true}
                    autoContainerWidth={false}
                    autoHeight={false}
                    autoWidth={false}
                    cellRangeRenderer={[Function]}
                    cellRenderer={[Function]}
                    columnCount={2}
                    columnWidth={[Function]}
                    containerRole="rowgroup"
                    containerStyle={Object {}}
                    estimatedColumnSize={100}
                    estimatedRowSize={30}
                    getScrollbarSize={[Function]}
                    height={40}
                    isScrollingOptOut={false}
                    noContentRenderer={[Function]}
                    onScroll={[Function]}
                    onScrollbarPresenceChange={[Function]}
                    onSectionRendered={[Function]}
                    overscanColumnCount={0}
                    overscanIndicesGetter={[Function]}
                    overscanRowCount={10}
                    role="grid"
                    rowCount={0}
                    rowHeight={30}
                    scrollToAlignment="auto"
                    scrollToColumn={-1}
                    scrollToRow={-1}
                    scrollingResetTimeInterval={150}
                    style={
                      Object {
                        "width": "100%",
                      }
                    }
                    tabIndex={0}
                    width={0}
                  >
                    <div
                      aria-label="grid"
                      aria-readonly={true}
                      className="ReactVirtualized__Grid"
                      onScroll={[Function]}
                      role="grid"
                      style={
                        Object {
                          "WebkitOverflowScrolling": "touch",
                          "boxSizing": "border-box",
                          "direction": "ltr",
                          "height": 40,
                          "overflowX": "auto",
                          "overflowY": "hidden",
                          "position": "relative",
                          "width": "100%",
                          "willChange": "transform",
                        }
                      }
                      tabIndex={0}
                    />
                  </Grid>
                </div>
              </div>
            </div>
          </AutoSizer>
        </div>
      </StyledComponent>
    </styled.div>
  </div>,
]
`;
